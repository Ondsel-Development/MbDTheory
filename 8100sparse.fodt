<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:rpt="http://openoffice.org/2005/report" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:css3t="http://www.w3.org/TR/css3-text/" xmlns:officeooo="http://openoffice.org/2009/office" office:version="1.3" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><meta:generator>LibreOffice/7.4.6.2$Windows_X86_64 LibreOffice_project/5b1f5509c2decdade7fda905e3e1429a67acd63d</meta:generator><meta:initial-creator>Preferred Customer</meta:initial-creator><meta:creation-date>1995-11-16T01:43:00</meta:creation-date><dc:creator>Preferred Customer</dc:creator><dc:date>1995-11-16T00:18:00</dc:date><dc:language>en-US</dc:language><meta:editing-cycles>2</meta:editing-cycles><meta:editing-duration>PT15M0S</meta:editing-duration><meta:document-statistic meta:table-count="0" meta:image-count="0" meta:object-count="0" meta:page-count="97" meta:paragraph-count="2338" meta:word-count="17764" meta:character-count="122766"/><meta:user-defined meta:name="Info 1"/><meta:user-defined meta:name="Info 2"/><meta:user-defined meta:name="Info 3"/><meta:user-defined meta:name="Info 4"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">32597</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">41753</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">22756</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">19881</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">14259</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">32597</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">41751</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">55351</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">100</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
     <config:config-item config:name="KeepRatio" config:type="boolean">false</config:config-item>
     <config:config-item config:name="HideWhitespace" config:type="boolean">false</config:config-item>
     <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">true</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string">HP Officejet Pro 8600 (Network)</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary">KQv+/0hQIE9mZmljZWpldCBQcm8gODYwMCAoTmV0d29yaykAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASFAgT2ZmaWNlamV0IFBybyA4NjAwAAAAAAAAAAAAAAAWAAEASgoAAAAAAAAIAFZUAAAkbQAAM1ROVwAAAAAKAEgAUAAgAE8AZgBmAGkAYwBlAGoAZQB0ACAAUAByAG8AIAA4ADYAMAAwACAAKABOAGUAdAB3AG8AcgBrAAAAAAABBAMG3ABkCUP/gQcBAAEA6gpvCGQAAQAPAFgCAgABAFgCAgABAEwAZQB0AHQAZQByAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAgAAAAIAAAAVAQAAAQEAAAAAAAAAAAAAAAAAAAAAAABESU5VIgC4AhQFUAS7D207AAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAABwuAIAAFNNVEoAAAAAEACoAgxQUEgBAAAAUQjbYFEI22AHAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAABYAgAAWAIAAFgCAABYAgAAAgAAAOwTAADIGQAAoRMAAH0ZAABLAAAASwAAADwAAAA8AAAAPAAAADwAAAAAAAAAAQAAAA8nAAABAAAAAQAAAAEAAAAPJwAAAAAAAA8nAAAPJwAAAAAAAA8nAAAPJwAADycAAA8nAAAPJwAADycAAA8nAAAPJwAADycAAA8nAAAPJwAADycAAA8nAAAPJwAADycAAA8nAAAPJwAADycAAA8nAAAPJwAADycAAA8nAAAPJwAADycAAA8nAAAPJwAADyclIEFwciAxOCAxMToxNjo0Mjo1MTIgMjAyMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAd7oPYEsAAABLAAAAAQAAAAAAAAAEAAAAAAEAAHe6D2AAAAAAEgBDT01QQVRfRFVQTEVYX01PREUPAER1cGxleE1vZGU6Ok9mZg==</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveThumbnail" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">disabled</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MsWordCompMinLineHeightByFly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">true</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaLineSpacingToTableCells" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">true</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">468820</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="Rsid" config:type="int">468820</config:config-item>
   <config:config-item config:name="MsWordCompTrailingBlanks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">false</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedOnlyUsedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedLatinScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedAsianScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmptyDbFieldHidesPara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedComplexScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TreatSingleColumnBreakAsPageBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DisableOffPagePositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ContinuousEndnotes" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectBookmarks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectFields" config:type="boolean">false</config:config-item>
   <config:config-item config:name="HeaderSpacingBelowLastPara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FrameAutowidthWithMorePara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="GutterAtTop" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FootnoteInColumnToPageEnd" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ImagePreferredDPI" config:type="int">0</config:config-item>
   <config:config-item config:name="AutoFirstLineIndentDisregardLineSpace" config:type="boolean">false</config:config-item>
   <config:config-item config:name="WordLikeWrapForAsCharFlys" config:type="boolean">false</config:config-item>
   <config:config-item config:name="NoNumberingShowFollowBy" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">true</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink"/>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="Albany" svg:font-family="Albany" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Arial" svg:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Arial Unicode MS" svg:font-family="&apos;Arial Unicode MS&apos;" style:font-pitch="variable"/>
  <style:font-face style:name="HG Mincho Light J" svg:font-family="&apos;HG Mincho Light J&apos;" style:font-pitch="variable"/>
  <style:font-face style:name="Thorndale" svg:font-family="Thorndale" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Times New Roman" svg:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#808080" draw:fill-color="#cfe7f5" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.1181in" draw:shadow-offset-y="0.1181in" draw:start-line-spacing-horizontal="0.1114in" draw:start-line-spacing-vertical="0.1114in" draw:end-line-spacing-horizontal="0.1114in" draw:end-line-spacing-vertical="0.1114in" style:flow-with-text="true"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:color="#000000" loext:opacity="100%" loext:color-lum-mod="100%" loext:color-lum-off="0%" style:font-name="Thorndale" fo:font-size="12pt" fo:language="en" fo:country="US" style:font-name-asian="HG Mincho Light J" style:font-size-asian="12pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Arial Unicode MS" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.5in" style:writing-mode="page"/>
   <style:text-properties fo:color="#000000" loext:opacity="100%" style:font-name="Thorndale" fo:font-size="12pt" fo:language="en" fo:country="US" style:font-name-asian="HG Mincho Light J" style:font-size-asian="12pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Arial Unicode MS" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2" loext:hyphenation-no-caps="false" loext:hyphenation-no-last-word="false" loext:hyphenation-word-char-count="no-limit" loext:hyphenation-zone="no-limit"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="separating"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="always"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text">
   <style:paragraph-properties fo:orphans="2" fo:widows="2"/>
   <style:text-properties style:use-window-font-color="true" loext:opacity="0%" style:font-name="Times New Roman" fo:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable" fo:font-size="10pt" fo:language="en" fo:country="US" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0835in" style:contextual-spacing="false"/>
  </style:style>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" style:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Albany" fo:font-family="Albany" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="HG Mincho Light J" style:font-family-asian="&apos;HG Mincho Light J&apos;" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="Arial Unicode MS" style:font-family-complex="&apos;Arial Unicode MS&apos;" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Heading_20_1" style:display-name="Heading 1" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:default-outline-level="1" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0417in" style:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" fo:font-weight="bold" style:letter-kerning="true" style:font-size-asian="14pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="Heading_20_2" style:display-name="Heading 2" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:default-outline-level="2" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0417in" style:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Arial" fo:font-family="Arial" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="12pt" fo:font-style="italic" fo:font-weight="bold" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="Heading_20_3" style:display-name="Heading 3" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0417in" style:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties fo:font-size="12pt" fo:font-weight="bold" style:font-size-asian="12pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="WW-Default_20_Paragraph_20_Font" style:display-name="WW-Default Paragraph Font" style:family="text"/>
  <style:style style:name="Footnote_20_Symbol" style:display-name="Footnote Symbol" style:family="text"/>
  <style:style style:name="Endnote_20_Symbol" style:display-name="Endnote Symbol" style:family="text"/>
  <style:style style:name="Footnote_20_anchor" style:display-name="Footnote anchor" style:family="text">
   <style:text-properties style:text-position="super 58%"/>
  </style:style>
  <style:style style:name="Endnote_20_anchor" style:display-name="Endnote anchor" style:family="text">
   <style:text-properties style:text-position="super 58%"/>
  </style:style>
  <style:style style:name="Frame" style:family="graphic">
   <style:graphic-properties text:anchor-type="paragraph" svg:x="0in" svg:y="0in" style:wrap="parallel" style:number-wrapped-paragraphs="no-limit" style:wrap-contour="false" style:vertical-pos="top" style:vertical-rel="paragraph-content" style:horizontal-pos="center" style:horizontal-rel="paragraph-content"/>
  </style:style>
  <style:style style:name="Graphics" style:family="graphic">
   <style:graphic-properties text:anchor-type="paragraph" svg:x="0in" svg:y="0in" style:wrap="none" style:vertical-pos="top" style:vertical-rel="paragraph" style:horizontal-pos="center" style:horizontal-rel="paragraph"/>
  </style:style>
  <style:style style:name="OLE" style:family="graphic">
   <style:graphic-properties text:anchor-type="paragraph" svg:x="0in" svg:y="0in" style:wrap="none" style:vertical-pos="top" style:vertical-rel="paragraph" style:horizontal-pos="center" style:horizontal-rel="paragraph"/>
  </style:style>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" loext:num-list-format="%1%" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" loext:num-list-format="%2%" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" loext:num-list-format="%3%" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" loext:num-list-format="%4%" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" loext:num-list-format="%5%" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" loext:num-list-format="%6%" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" loext:num-list-format="%7%" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" loext:num-list-format="%8%" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" loext:num-list-format="%9%" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" loext:num-list-format="%10%" style:num-format="">
    <style:list-level-properties/>
   </text:outline-level-style>
  </text:outline-style>
  <text:notes-configuration text:note-class="footnote" text:citation-style-name="Footnote_20_Symbol" text:citation-body-style-name="Footnote_20_anchor" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="page"/>
  <text:notes-configuration text:note-class="endnote" text:citation-style-name="Endnote_20_Symbol" text:citation-body-style-name="Endnote_20_anchor" text:master-page-name="Endnote" style:num-format="1" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.1965in" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="8.5in" fo:page-height="11in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="1in" fo:margin-bottom="1in" fo:margin-left="1.25in" fo:margin-right="1.25in" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="20" style:layout-grid-base-height="0.278in" style:layout-grid-ruby-height="0.139in" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="false" style:layout-grid-display="false" style:footnote-max-height="0in" loext:margin-gutter="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
  <style:page-layout style:name="pm2">
   <style:page-layout-properties fo:page-width="8.5in" fo:page-height="11in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="0.7874in" fo:margin-bottom="0.7874in" fo:margin-left="0.7874in" fo:margin-right="0.7874in" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="20" style:layout-grid-base-height="0.278in" style:layout-grid-ruby-height="0.139in" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="false" style:layout-grid-display="false" style:footnote-max-height="0in" loext:margin-gutter="0in">
    <style:footnote-sep style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
  <style:style style:name="dp1" style:family="drawing-page">
   <style:drawing-page-properties draw:background-size="full"/>
  </style:style>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1" draw:style-name="dp1"/>
  <style:master-page style:name="Endnote" style:page-layout-name="pm2" draw:style-name="dp1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Figure"/>
   </text:sequence-decls>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">Sparse User&apos;s Guide</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="22"/>A Sparse Linear Equation Solver</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="31"/>Version 1.3a</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="31"/>1 April 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="28"/>Kenneth S. Kundert</text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>Alberto Sangiovanni-Vincentelli</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="30"/>Department of</text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Electrical Engineering and Computer Sciences</text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>University of California, Berkeley</text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Berkeley, Calif. 94720</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">Table of Contents</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">1: <text:s/>Introduction ..................................................... <text:s text:c="3"/>1</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>1.1: <text:s/>Features of Sparse1.3 .................................. <text:s text:c="3"/>1</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>1.2: <text:s/>Enhancements of Sparse1.3 over Sparse1.2 ............... <text:s text:c="3"/>2</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>1.3: <text:s/>Copyright Information .................................. <text:s text:c="3"/>3</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">2: <text:s/>Primer ........................................................... <text:s text:c="3"/>4</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>2.1: <text:s/>Solving Matrix Equations ............................... <text:s text:c="3"/>4</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>2.2: <text:s/>Error Control .......................................... <text:s text:c="3"/>5</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>2.3: <text:s/>Building the Matrix .................................... <text:s text:c="3"/>6</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>2.4: <text:s/>Initializing the Matrix ................................ <text:s text:c="3"/>7</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>2.5: <text:s/>Indices ................................................ <text:s text:c="3"/>8</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>2.6: <text:s/>Configuring Sparse ..................................... <text:s text:c="3"/>9</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">3: <text:s/>Introduction to the Sparse Routines .............................. <text:s text:c="2"/>10</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>3.1: <text:s/>Creating the Matrix .................................... <text:s text:c="2"/>10</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>3.2: <text:s/>Building the Matrix .................................... <text:s text:c="2"/>10</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>3.3: <text:s/>Clearing the Matrix .................................... <text:s text:c="2"/>10</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>3.4: <text:s/>Placing Data in the Matrix ............................. <text:s text:c="2"/>11</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>3.5: <text:s/>Influencing the Factorization .......................... <text:s text:c="2"/>11</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>3.6: <text:s/>Factoring the Matrix ................................... <text:s text:c="2"/>11</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>3.7: <text:s/>Solving the Matrix Equation ............................ <text:s text:c="2"/>12</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>3.8: <text:s/>Numerical Error Estimation ............................. <text:s text:c="2"/>12</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>3.9: <text:s/>Matrix Operations ...................................... <text:s text:c="2"/>13</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>3.10: <text:s/>Matrix Statistics and Documentation ................... <text:s text:c="2"/>13</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">4: <text:s/>Routines ......................................................... <text:s text:c="2"/>15</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.1: <text:s/>spClear() .............................................. <text:s text:c="2"/>15</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.2: <text:s/>spCondition() .......................................... <text:s text:c="2"/>16</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.3: <text:s/>spCreate() ............................................. <text:s text:c="2"/>17</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.4: <text:s/>spDeleteRowAndCol() .................................... <text:s text:c="2"/>18</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.5: <text:s/>spDestroy() ............................................ <text:s text:c="2"/>18</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.6: <text:s/>spDeterminant() ........................................ <text:s text:c="2"/>19</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.7: <text:s/>spElementCount() ....................................... <text:s text:c="2"/>20</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.8: <text:s/>spError() .............................................. <text:s text:c="2"/>20</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.9: <text:s/>spFactor() ............................................. <text:s text:c="2"/>21</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.10: <text:s/>spFileMatrix() ........................................ <text:s text:c="2"/>22</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.11: <text:s/>spFileStats() ......................................... <text:s text:c="2"/>23</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.12: <text:s/>spFileVector() ........................................ <text:s text:c="2"/>24</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.13: <text:s/>spFillinCount() ....................................... <text:s text:c="2"/>25</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.14: <text:s/>spGetAdmittance() ..................................... <text:s text:c="2"/>26</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.15: <text:s/>spGetElement() ........................................ <text:s text:c="2"/>27</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.16: <text:s/>spGetInitInfo() ....................................... <text:s text:c="2"/>28</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.17: <text:s/>spGetOnes() ........................................... <text:s text:c="2"/>30</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.18: <text:s/>spGetQuad() ........................................... <text:s text:c="2"/>32</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.19: <text:s/>spGetSize() ........................................... <text:s text:c="2"/>32</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.20: <text:s/>spInitialize() ........................................ <text:s text:c="2"/>34</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.21: <text:s/>spInstallInitInfo() ................................... <text:s text:c="2"/>34</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.22: <text:s/>spLargestElement() .................................... <text:s text:c="2"/>35</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.23: <text:s/>spMNA Preorder() ...................................... <text:s text:c="2"/>36</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.24: <text:s/>spMultiply() .......................................... <text:s text:c="2"/>37</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="8"/>4.25: <text:s/>spMultTransposed() .................................... <text:s text:c="2"/>38</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.26: <text:s/>spNorm() .............................................. <text:s text:c="2"/>39</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.27: <text:s/>spOrderAndFactor() .................................... <text:s text:c="2"/>39</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.28: <text:s/>spPartition() ......................................... <text:s text:c="2"/>42</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.29: <text:s/>spPrint() ............................................. <text:s text:c="2"/>42</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.30: <text:s/>spPseudoCondition() ................................... <text:s text:c="2"/>43</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.31: <text:s/>spRoundoff() .......................................... <text:s text:c="2"/>44</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.32: <text:s/>spScale() ............................................. <text:s text:c="2"/>45</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.33: <text:s/>spSetComplex() ........................................ <text:s text:c="2"/>46</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.34: <text:s/>spSetReal() ........................................... <text:s text:c="2"/>46</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.35: <text:s/>spSolve() ............................................. <text:s text:c="2"/>47</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.36: <text:s/>spSolveTransposed() ................................... <text:s text:c="2"/>48</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.37: <text:s/>spStripFills() ........................................ <text:s text:c="2"/>49</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>4.38: <text:s/>spWhereSingular() ..................................... <text:s text:c="2"/>49</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">5: <text:s/>Macro Functions .................................................. <text:s text:c="2"/>50</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>5.1: <text:s/>spADD REAL ELEMENT() ................................... <text:s text:c="2"/>50</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>5.2: <text:s/>spADD IMAG ELEMENT() ................................... <text:s text:c="2"/>50</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>5.3: <text:s/>spADD COMPLEX ELEMENT() ................................ <text:s text:c="2"/>51</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>5.4: <text:s/>spADD REAL QUAD() ...................................... <text:s text:c="2"/>51</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>5.5: <text:s/>spADD IMAG QUAD() ...................................... <text:s text:c="2"/>52</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>5.6: <text:s/>spADD COMPLEX QUAD() ................................... <text:s text:c="2"/>52</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">6: <text:s/>Configuring Sparse ............................................... <text:s text:c="2"/>53</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>6.1: <text:s/>Sparse Options ......................................... <text:s text:c="2"/>53</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="8"/>6.2: <text:s/>Sparse Constants ....................................... <text:s text:c="2"/>57</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>6.3: <text:s/>Machine Constants ...................................... <text:s text:c="2"/>59</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">7: <text:s/>Exports .......................................................... <text:s text:c="2"/>61</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>7.1: <text:s/>Error Codes ............................................ <text:s text:c="2"/>61</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="8"/>7.2: <text:s/>Data Structures ........................................ <text:s text:c="2"/>62</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">8: <text:s/>FORTRAN Compatibility ............................................ <text:s text:c="2"/>63</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">9: <text:s/>Sparse Test Program .............................................. <text:s text:c="2"/>65</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">10: <text:s/>Sparse Files .................................................... <text:s text:c="2"/>67</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">References ........................................................... <text:s text:c="2"/>72</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">1: <text:s/>INTRODUCTION</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse1.3 is a flexible package of subroutines written in <text:s/>C <text:s/>used <text:s/>to</text:p>
   <text:p text:style-name="Standard">quickly and accurately solve large sparse systems of linear equations. <text:s/>The</text:p>
   <text:p text:style-name="Standard">package is able to handle arbitrary real and complex <text:s/>square <text:s/>matrix <text:s/>equa-</text:p>
   <text:p text:style-name="Standard">tions. <text:s text:c="2"/>Besides <text:s/>being <text:s/>able <text:s/>to <text:s/>solve linear systems, it is also able to</text:p>
   <text:p text:style-name="Standard">quickly solve transposed systems, find determinants, <text:s/>and <text:s/>estimate <text:s/>errors</text:p>
   <text:p text:style-name="Standard">due <text:s/>to <text:s/>ill-conditioning in the system of equations and instability in the</text:p>
   <text:p text:style-name="Standard">computations. <text:s/>Sparse also provides a test program that is able read matrix</text:p>
   <text:p text:style-name="Standard">equations <text:s/>from <text:s/>a file, solve them, and print useful information about the</text:p>
   <text:p text:style-name="Standard">equation and its solution.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse1.3 is generally as fast or faster <text:s/>than <text:s/>other <text:s/>popular <text:s/>sparse</text:p>
   <text:p text:style-name="Standard">matrix <text:s/>packages <text:s/>when <text:s/>solving many matrices of similar structure. <text:s/>Sparse</text:p>
   <text:p text:style-name="Standard">does not require or assume symmetry and is able to perform numerical pivot-</text:p>
   <text:p text:style-name="Standard">ing <text:s/>to avoid unnecessary error in the solution. <text:s/>It handles its own memory</text:p>
   <text:p text:style-name="Standard">allocation, which allows the user to forgo the hassle of providing adequate</text:p>
   <text:p text:style-name="Standard">memory. <text:s text:c="2"/>It <text:s/>also <text:s/>has a natural, flexible, and efficient interface to the</text:p>
   <text:p text:style-name="Standard">calling program.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse was originally written for use in <text:s/>circuit <text:s/>simulators <text:s/>and <text:s/>is</text:p>
   <text:p text:style-name="Standard">particularly <text:s/>apt <text:s/>at handling node- and modified-node admittance matrices.</text:p>
   <text:p text:style-name="Standard">The systems of linear generated in a circuit simulator <text:s/>stem <text:s/>from <text:s/>solving</text:p>
   <text:p text:style-name="Standard">large <text:s/>systems of nonlinear equations using Newton&apos;s method and integrating</text:p>
   <text:p text:style-name="Standard">large stiff systems of ordinary differential equations. <text:s/>However, Sparse is</text:p>
   <text:p text:style-name="Standard">also <text:s/>suitable <text:s/>for other uses, one in particular is solving the very large</text:p>
   <text:p text:style-name="Standard">systems of linear equations resulting from the numerical solution <text:s/>of <text:s/>par-</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>tial differential equations.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">1.1: <text:s/>Features of Sparse1.3</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Beyond the basic capability of being able to create, factor and <text:s/>solve</text:p>
   <text:p text:style-name="Standard">systems of equations, this package features several other capabilities that</text:p>
   <text:p text:style-name="Standard">enhance its utility. <text:s/>These features are:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>Ability to handle both real and complex systems <text:s/>of <text:s/>equations. <text:s text:c="2"/>Both</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>types <text:s/>may <text:s/>resident <text:s/>and <text:s/>active at the same time. <text:s/>In fact, the same</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>matrix may alternate between being real and complex.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>Ability to quickly solve the transposed system. <text:s/>This feature is <text:s/>use-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>ful <text:s/>when <text:s/>computing <text:s/>the <text:s/>sensitivity <text:s/>of a circuit using the adjoint</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>method.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>Memory for elements in the matrix is <text:s/>allocated <text:s/>dynamically, <text:s/>so <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>size <text:s/>of <text:s/>the matrix is only limited by the amount of memory available</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>to Sparse and the range of the integer data type, <text:s/>which <text:s/>is <text:s/>used <text:s/>to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>hold matrix indices.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>Ability to efficiently compute the condition number of the matrix <text:s/>and</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>an <text:s/>a posteriori estimate of the error caused by growth in the size of</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>the elements during the factorization.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>Much <text:s/>of <text:s/>the <text:s/>matrix <text:s/>initialization <text:s/>can <text:s/>be <text:s/>performed <text:s/>by <text:s/>Sparse,</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 2 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>providing <text:s/>advantages <text:s/>in <text:s/>speed <text:s/>and simplified coding of the calling</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>program.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>Ability to preorder modified node admittance matrices to enhance accu-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>racy and speed.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>Ability to exploit sparsity in the right-hand side <text:s/>vector <text:s/>to <text:s/>reduce</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>unnecessary computation.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>Ability to scale matrices prior to factoring to reduce uncertainty <text:s/>in</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>the solution.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>The ability to create and build a matrix <text:s/>without <text:s/>knowing <text:s/>its <text:s/>final</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>size.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>The ability to add elements, and rows and columns, to a <text:s/>matrix <text:s/>after</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>the matrix has been reordered.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>o <text:s text:c="3"/>The ability to delete rows and columns from a matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>The ability to strip the fill-ins from a matrix. <text:s/>This can improve the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>efficiency of a subsequent reordering.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>The ability to handle matrices that have rows and columns missing from</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>their input description.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>Ability to output the matrix in forms readable by either by people <text:s/>or</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>by <text:s/>the <text:s/>Sparse <text:s/>package. <text:s text:c="2"/>Basic statistics on the matrix can also be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>output.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o <text:s text:c="3"/>By default all arithmetic operations and <text:s/>number <text:s/>storage <text:s/>use <text:s/>double</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>precision. <text:s text:c="2"/>Thus, <text:s/>Sparse <text:s/>usually <text:s/>gives <text:s/>accurate <text:s/>results, even on</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>highly ill-conditioned systems. <text:s/>If so desired, Sparse can <text:s/>be <text:s/>easily</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>configured to use single precision arithmetic.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">1.2: <text:s/>Enhancements of Sparse1.3 over Sparse1.2</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Most notable of the enhancements provided by Sparse1.3 is that <text:s/>it <text:s/>is</text:p>
   <text:p text:style-name="Standard">considerably faster on dense matrices. <text:s/>Also, external names have been made</text:p>
   <text:p text:style-name="Standard">unique to 7 characters and the Sparse prefix sp has been prepended <text:s/>to <text:s/>all</text:p>
   <text:p text:style-name="Standard">externally <text:s/>accessible <text:s/>names <text:s/>to <text:s/>avoid conflicts. <text:s/>In addition, a routine</text:p>
   <text:p text:style-name="Standard">that efficiently estimates the condition number of a matrix has been <text:s/>added</text:p>
   <text:p text:style-name="Standard">and <text:s/>the code that estimates the growth in the factorization has been split</text:p>
   <text:p text:style-name="Standard">off from the actual factorization so that it is computed only when needed.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>It is now possible for the user program to store <text:s/>information <text:s/>in <text:s/>the</text:p>
   <text:p text:style-name="Standard">matrix <text:s/>elements. <text:s text:c="2"/>It <text:s/>is <text:s/>also possible to provide a subroutine to Sparse</text:p>
   <text:p text:style-name="Standard">that uses that information to initialize the matrix. <text:s/>This can greatly sim-</text:p>
   <text:p text:style-name="Standard">plify the user&apos;s code.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse1.3 has an FORTRAN interface. <text:s/>Routines written in <text:s/>FORTRAN <text:s/>can</text:p>
   <text:p text:style-name="Standard">access almost all of the features Sparse1.3.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 3 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">1.3: <text:s/>Copyright Information</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse1.3 has been copyrighted. <text:s/>Permission to use, copy, modify, <text:s/>and</text:p>
   <text:p text:style-name="Standard">distribute <text:s/>this software and its documentation for any purpose and without</text:p>
   <text:p text:style-name="Standard">fee is hereby granted, provided that the copyright <text:s/>notice <text:s/>appear <text:s/>in <text:s/>all</text:p>
   <text:p text:style-name="Standard">copies, <text:s/>and <text:s/>Sparse <text:s/>and the University of California, Berkeley are refer-</text:p>
   <text:p text:style-name="Standard">enced in all documentation for the program or product in which Sparse is to</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>be <text:s/>installed. <text:s text:c="2"/>The <text:s/>authors <text:s/>and <text:s/>the <text:s/>University <text:s/>of <text:s/>California make no</text:p>
   <text:p text:style-name="Standard">representations as to the suitability of the software for any purpose. <text:s text:c="2"/>It</text:p>
   <text:p text:style-name="Standard">is provided `as is&apos;, without express or implied warranty.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 4 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">2: <text:s/>PRIMER</text:h>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">2.1: <text:s/>Solving Matrix Equations</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse contains a collection of C subprograms <text:s/>that <text:s/>can <text:s/>be <text:s/>used <text:s/>to</text:p>
   <text:p text:style-name="Standard">solve <text:s/>linear <text:s/>algebraic <text:s/>systems <text:s/>of <text:s/>equations. <text:s/>These systems are of the</text:p>
   <text:p text:style-name="Standard">form:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="6"/>Ax = b</text:p>
   <text:p text:style-name="Standard">where A is an nxn matrix, x is the vector of n unknowns and b is the vector</text:p>
   <text:p text:style-name="Standard">of <text:s/>n right-hand side terms. <text:s/>Through out this package A is denoted Matrix,</text:p>
   <text:p text:style-name="Standard">x is denoted Solution and b is denoted RHS (for right-hand side). <text:s/>The sys-</text:p>
   <text:p text:style-name="Standard">tem <text:s/>is <text:s/>solved <text:s/>using <text:s/>LU factorization, so the actual solution process is</text:p>
   <text:p text:style-name="Standard">broken into two steps, the factorization or decomposition <text:s/>of <text:s/>the <text:s/>matrix,</text:p>
   <text:p text:style-name="Standard">performed <text:s/>by <text:s/>spFactor(), <text:s/>and the forward and backward substitution, per-</text:p>
   <text:p text:style-name="Standard">formed by spSolve(). <text:s/>spFactor() factors the given matrix <text:s/>into <text:s/>upper <text:s/>and</text:p>
   <text:p text:style-name="Standard">lower triangular matrices independent of the right-hand side. <text:s/>Once this is</text:p>
   <text:p text:style-name="Standard">done, the solution vector can be determined efficiently for any <text:s/>number <text:s/>of</text:p>
   <text:p text:style-name="Standard">right-hand sides without refactoring the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>This package exploits the fact that large matrices usually are <text:s/>sparse</text:p>
   <text:p text:style-name="Standard">by not storing or operating on elements in the matrix that are zero. <text:s/>Stor-</text:p>
   <text:p text:style-name="Standard">ing zero elements is avoided by organizing the matrix <text:s/>into <text:s/>an <text:s/>orthogonal</text:p>
   <text:p text:style-name="Standard">linked-list. <text:s text:c="2"/>Thus, <text:s/>to <text:s/>access <text:s/>an <text:s/>element if only its indices are known</text:p>
   <text:p text:style-name="Standard">requires stepping through the list, which is slow. <text:s/>This function <text:s/>is <text:s/>per-</text:p>
   <text:p text:style-name="Standard">formed <text:s/>by <text:s/>the routine spGetElement(). <text:s/>It is used to initially enter data</text:p>
   <text:p text:style-name="Standard">into a matrix and to build <text:s/>the <text:s/>linked-list. <text:s text:c="2"/>Because <text:s/>it <text:s/>is <text:s/>common <text:s/>to</text:p>
   <text:p text:style-name="Standard">repeatedly solve matrices with identical zero/nonzero structure, it is pos-</text:p>
   <text:p text:style-name="Standard">sible to reuse the linked-list. <text:s/>Thus, the linked list is <text:s/>left <text:s/>in <text:s/>memory</text:p>
   <text:p text:style-name="Standard">and <text:s/>the <text:s/>element values are simply cleared by spClear() before the linked-</text:p>
   <text:p text:style-name="Standard">list is reused. <text:s/>To speed the entering of the element values <text:s/>into <text:s/>succes-</text:p>
   <text:p text:style-name="Standard">sive <text:s/>matrices, <text:s/>spGetElement() <text:s/>returns <text:s/>a <text:s/>pointer <text:s/>to the element in the</text:p>
   <text:p text:style-name="Standard">matrix. <text:s/>This pointer can then be used to <text:s/>place <text:s/>data <text:s/>directly <text:s/>into <text:s/>the</text:p>
   <text:p text:style-name="Standard">matrix without having to traverse through the linked-list.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The order in which the rows and columns of the matrix are factored <text:s/>is</text:p>
   <text:p text:style-name="Standard">very <text:s/>important. <text:s text:c="2"/>It <text:s/>directly affects the amount of time required for the</text:p>
   <text:p text:style-name="Standard">factorization and the forward and backward substitution. <text:s/>It <text:s/>also <text:s/>affects</text:p>
   <text:p text:style-name="Standard">the <text:s/>accuracy <text:s/>of <text:s/>the <text:s/>result. <text:s/>The process of choosing this order is time</text:p>
   <text:p text:style-name="Standard">consuming, but fortunately it usually only has to be <text:s/>done <text:s/>once <text:s/>for <text:s/>each</text:p>
   <text:p text:style-name="Standard">particular <text:s/>matrix <text:s/>structure <text:s/>encountered. <text:s text:c="2"/>When <text:s/>a <text:s/>matrix <text:s/>with <text:s/>a <text:s/>new</text:p>
   <text:p text:style-name="Standard">zero/nonzero structure is to <text:s/>be <text:s/>factored, <text:s/>it <text:s/>is <text:s/>done <text:s/>by <text:s/>using <text:s/>spOr-</text:p>
   <text:p text:style-name="Standard">derAndFactor(). <text:s text:c="2"/>Subsequent <text:s/>matrices <text:s/>of <text:s/>the same structure are factored</text:p>
   <text:p text:style-name="Standard">with spFactor(). <text:s/>The latter routine does not have the ability <text:s/>to <text:s/>reorder</text:p>
   <text:p text:style-name="Standard">matrix, <text:s/>but <text:s/>it is considerably faster. <text:s/>It may be that a order chosen may</text:p>
   <text:p text:style-name="Standard">be unsuitable for subsequent factorizations. <text:s/>If this is known to be true a</text:p>
   <text:p text:style-name="Standard">priori, it is possible to use spOrderAndFactor() for the subsequent factor-</text:p>
   <text:p text:style-name="Standard">izations, with a noticeable speed penalty. <text:s/>spOrderAndFactor() monitors the</text:p>
   <text:p text:style-name="Standard">numerical stability of the factorization and will modify an existing order-</text:p>
   <text:p text:style-name="Standard">ing to maintain stability. <text:s/>Otherwise, <text:s/>an <text:s/>a <text:s/>posteriori <text:s/>measure <text:s/>of <text:s/>the</text:p>
   <text:p text:style-name="Standard">numerical <text:s/>stability <text:s/>of <text:s/>the factorization can be computed, and the matrix</text:p>
   <text:p text:style-name="Standard">reordered if necessary.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The Sparse routines allow several matrices of different structures <text:s/>to</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 5 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">be <text:s/>resident at once. <text:s/>When a matrix of a new structure is encountered, the</text:p>
   <text:p text:style-name="Standard">user calls spCreate(). <text:s/>This <text:s/>routine <text:s/>creates <text:s/>the <text:s/>basic <text:s/>frame <text:s/>for <text:s/>the</text:p>
   <text:p text:style-name="Standard">linked-list <text:s/>and <text:s/>returns <text:s/>a <text:s/>pointer <text:s/>to this frame. <text:s/>This pointer is then</text:p>
   <text:p text:style-name="Standard">passed as an argument to the other Sparse routines to indicate which matrix</text:p>
   <text:p text:style-name="Standard">is to be operated on. <text:s/>The number of matrices that can be kept in memory at</text:p>
   <text:p text:style-name="Standard">once is only limited by the amount of memory available to the user and <text:s/>the</text:p>
   <text:p text:style-name="Standard">size <text:s/>of the matrices. <text:s/>When a matrix frame is no longer needed, the memory</text:p>
   <text:p text:style-name="Standard">can be reclaimed by calling spDestroy().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>A more complete discussion of sparse systems of equations, methods for</text:p>
   <text:p text:style-name="Standard">solving them, their error mechanisms, and the algorithms used in Sparse can</text:p>
   <text:p text:style-name="Standard">be found in Kundert <text:s/>[kundert86]. <text:s text:c="2"/>A <text:s/>particular <text:s/>emphasis <text:s/>is <text:s/>placed <text:s/>on</text:p>
   <text:p text:style-name="Standard">matrices resulting from circuit simulators.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">2.2: <text:s/>Error Control</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>There are two separate mechanisms that can <text:s/>cause <text:s/>errors <text:s/>during <text:s/>the</text:p>
   <text:p text:style-name="Standard">factoring <text:s/>and <text:s/>solution <text:s/>of <text:s/>a <text:s/>system <text:s/>of <text:s/>equations. <text:s text:c="2"/>The first is ill-</text:p>
   <text:p text:style-name="Standard">conditioning in the system. <text:s/>A system of equations <text:s/>is <text:s/>ill-conditioned <text:s/>if</text:p>
   <text:p text:style-name="Standard">the <text:s/>solution <text:s/>is <text:s/>excessively sensitive to disturbances in the input data,</text:p>
   <text:p text:style-name="Standard">which occurs when the system is nearly <text:s/>singular. <text:s text:c="2"/>If <text:s/>a <text:s/>system <text:s/>is <text:s/>ill-</text:p>
   <text:p text:style-name="Standard">conditioned <text:s/>then <text:s/>uncertainty <text:s/>in <text:s/>the result is unavoidable, even if A is</text:p>
   <text:p text:style-name="Standard">accurately factored into L and U. <text:s/>When ill-conditioning is a problem, <text:s/>the</text:p>
   <text:p text:style-name="Standard">problem <text:s/>as <text:s/>stated is probably ill-posed and the system should be reformu-</text:p>
   <text:p text:style-name="Standard">lated such that it is not so ill-conditioned. <text:s/>It is <text:s/>possible <text:s/>to <text:s/>measure</text:p>
   <text:p text:style-name="Standard">the <text:s/>ill-conditioning of matrix using spCondition(). <text:s/>This function returns</text:p>
   <text:p text:style-name="Standard">an estimate of the reciprocal of the condition number of the matrix <text:s/>(K(A))</text:p>
   <text:p text:style-name="Standard">[strang80]. <text:s/>The condition number can be used when computing a bound on the</text:p>
   <text:p text:style-name="Standard">error in the solution using the following inequality [golub83].</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="12"/>||dx|| <text:s text:c="7"/>(||dA|| <text:s text:c="2"/>||db||)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>------ &lt; K(A) (------ + ------) + higher order terms</text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>||x|| <text:s text:c="8"/>(||A|| <text:s text:c="3"/>||b|| )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">where dA and db are the uncertainties in the <text:s/>matrix <text:s/>and <text:s/>right-hand <text:s/>side</text:p>
   <text:p text:style-name="Standard">vector and are assumed small.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The second mechanism that causes uncertainty is the build up of round-</text:p>
   <text:p text:style-name="Standard">off <text:s/>error. <text:s text:c="2"/>Roundoff <text:s/>error <text:s/>can <text:s/>become excessive if there is sufficient</text:p>
   <text:p text:style-name="Standard">growth in the size of the elements during <text:s/>the <text:s/>factorization. <text:s text:c="2"/>Growth <text:s/>is</text:p>
   <text:p text:style-name="Standard">controlled <text:s/>by <text:s/>careful pivoting. <text:s/>In Sparse, the pivoting is controlled by</text:p>
   <text:p text:style-name="Standard">the relative threshold parameter. <text:s/>In conventional full <text:s/>matrix <text:s/>techniques</text:p>
   <text:p text:style-name="Standard">the <text:s/>pivot <text:s/>is <text:s/>chosen to be the largest element in a column. <text:s/>When working</text:p>
   <text:p text:style-name="Standard">with sparse matrices it is important <text:s/>to <text:s/>choose <text:s/>pivots <text:s/>to <text:s/>minimize <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>reduction <text:s/>in sparsity. <text:s/>The best pivot to retain sparsity is often not the</text:p>
   <text:p text:style-name="Standard">best pivot to retain accuracy. <text:s/>Thus, some compromise <text:s/>must <text:s/>be <text:s/>made. <text:s text:c="2"/>In</text:p>
   <text:p text:style-name="Standard">threshold pivoting, as used in this package, the best pivot to retain spar-</text:p>
   <text:p text:style-name="Standard">sity is used unless it is smaller than the <text:s/>relative <text:s/>threshold <text:s/>times <text:s/>the</text:p>
   <text:p text:style-name="Standard">largest <text:s/>element <text:s/>in <text:s/>the <text:s/>column. <text:s/>Thus, a relative threshold close to one</text:p>
   <text:p text:style-name="Standard">emphasizes accuracy so it will produce a minimum amount of <text:s/>growth, <text:s/>unfor-</text:p>
   <text:p text:style-name="Standard">tunately <text:s/>it also slows the factorization. <text:s/>A very small relative threshold</text:p>
   <text:p text:style-name="Standard">emphasizes maintenance of sparsity and so speeds the factorization, but can</text:p>
   <text:p text:style-name="Standard">result <text:s/>in a large amount of growth. <text:s/>In our experience, we have found that</text:p>
   <text:p text:style-name="Standard">a relative threshold of 0.001 seems to result in a satisfactory <text:s/>compromise</text:p>
   <text:p text:style-name="Standard">between <text:s/>speed <text:s/>and accuracy, though other authors suggest a more conserva-</text:p>
   <text:p text:style-name="Standard">tive value of 0.1 [duff86].</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 6 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The growth that occurred during a factorization <text:s/>can <text:s/>be <text:s/>computed <text:s/>by</text:p>
   <text:p text:style-name="Standard">taking the ratio of the largest matrix element in any stage of the factori-</text:p>
   <text:p text:style-name="Standard">zation to the largest matrix element before factorization. <text:s/>The two numbers</text:p>
   <text:p text:style-name="Standard">are <text:s/>estimated <text:s/>using <text:s/>spLargestElement(). <text:s text:c="2"/>If <text:s/>the <text:s/>growth is found to be</text:p>
   <text:p text:style-name="Standard">excessive after spOrderAndFactor(), then the relative threshold <text:s/>should <text:s/>be</text:p>
   <text:p text:style-name="Standard">increased and the matrix reconstructed and refactored. <text:s/>Once the matrix has</text:p>
   <text:p text:style-name="Standard">been ordered and factored without suffering too much growth, the amount <text:s/>of</text:p>
   <text:p text:style-name="Standard">growth that occurred should be recorded. <text:s/>If, on subsequent factorizations,</text:p>
   <text:p text:style-name="Standard">as performed by spFactor(), the <text:s/>amount <text:s/>of <text:s/>growth <text:s/>becomes <text:s/>significantly</text:p>
   <text:p text:style-name="Standard">larger, <text:s/>then <text:s/>the <text:s/>matrix <text:s/>should be reconstructed and reordered using the</text:p>
   <text:p text:style-name="Standard">same relative threshold with spOrderAndFactor(). <text:s/>If the <text:s/>growth <text:s/>is <text:s/>still</text:p>
   <text:p text:style-name="Standard">excessive, then the relative threshold should be raised again.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">2.3: <text:s/>Building the Matrix</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>It is not necessary to specify the size of the matrix before beginning</text:p>
   <text:p text:style-name="Standard">to add elements to it. <text:s/>When the compiler option EXPANDABLE is turned on it</text:p>
   <text:p text:style-name="Standard">is possible to initially specify the size of the matrix to any <text:s/>size <text:s/>equal</text:p>
   <text:p text:style-name="Standard">to <text:s/>or smaller than the final size of the matrix. <text:s/>Specifically, the matrix</text:p>
   <text:p text:style-name="Standard">size may be initially specified as zero. <text:s/>If this is done then, as the ele-</text:p>
   <text:p text:style-name="Standard">ments <text:s/>are entered into the matrix, the matrix is enlarged as needed. <text:s/>This</text:p>
   <text:p text:style-name="Standard">feature is particularly useful in circuit simulators because it allows <text:s/>the</text:p>
   <text:p text:style-name="Standard">building <text:s/>of <text:s/>the <text:s/>matrix <text:s/>as the circuit description is parsed. <text:s/>Note that</text:p>
   <text:p text:style-name="Standard">once the matrix has been reordered by the routines spMNA Preorder(), spFac-</text:p>
   <text:p text:style-name="Standard">tor() or spOrderAndFactor() the size of the matrix becomes fixed and may no</text:p>
   <text:p text:style-name="Standard">longer be enlarged unless the compiler option TRANSLATE is enabled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The TRANSLATE option allows Sparse to translate a <text:s/>non-packed <text:s/>set <text:s/>of</text:p>
   <text:p text:style-name="Standard">row <text:s/>and <text:s/>column <text:s/>numbers to an internal packed set. <text:s/>In other words, there</text:p>
   <text:p text:style-name="Standard">may be rows and columns <text:s/>missing <text:s/>from <text:s/>the <text:s/>external <text:s/>description <text:s/>of <text:s/>the</text:p>
   <text:p text:style-name="Standard">matrix. <text:s text:c="2"/>This <text:s/>feature <text:s/>provides two benefits. <text:s/>First, if two matrices are</text:p>
   <text:p text:style-name="Standard">identical in structure, except for a few missing rows and columns <text:s/>in <text:s/>one,</text:p>
   <text:p text:style-name="Standard">then <text:s/>the <text:s/>TRANSLATE <text:s/>option <text:s/>allows them to be treated identically. <text:s/>Simi-</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>larly, rows and columns may be deleted from a <text:s/>matrix <text:s/>after <text:s/>it <text:s/>has <text:s/>been</text:p>
   <text:p text:style-name="Standard">built <text:s/>and operated upon. <text:s/>Deletion of rows and columns is performed by the</text:p>
   <text:p text:style-name="Standard">function spDeleteRowAndCol(). <text:s/>Second, it allows the use of <text:s/>the <text:s/>functions</text:p>
   <text:p text:style-name="Standard">spGetElement(), <text:s/>spGetAdmittance(), <text:s/>spGetQuad(), and spGetOnes() after the</text:p>
   <text:p text:style-name="Standard">matrix has been reordered. <text:s/>These functions access the matrix by using <text:s/>row</text:p>
   <text:p text:style-name="Standard">and <text:s/>column <text:s/>indices, <text:s/>which have to be translated to internal indices once</text:p>
   <text:p text:style-name="Standard">the matrix is reordered. <text:s/>Thus, when TRANSLATE is used in conjunction <text:s/>with</text:p>
   <text:p text:style-name="Standard">the <text:s/>EXPANDABLE <text:s/>option, rows and columns may be added to a matrix after it</text:p>
   <text:p text:style-name="Standard">has been reordered.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Another provided feature that is useful with circuit simulators is the</text:p>
   <text:p text:style-name="Standard">ability <text:s/>to <text:s/>add <text:s/>elements to the matrix in row zero or column zero. <text:s/>These</text:p>
   <text:p text:style-name="Standard">elements will have no affect on the matrix or the results. <text:s/>The benefit <text:s/>of</text:p>
   <text:p text:style-name="Standard">this <text:s/>is that when working with a nodal formulation, grounded components do</text:p>
   <text:p text:style-name="Standard">not have to be treated special when building the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 7 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">2.4: <text:s/>Initializing the Matrix</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Once a matrix has been factored, it is necessary to clear <text:s/>the <text:s/>matrix</text:p>
   <text:p text:style-name="Standard">before <text:s/>it <text:s/>can <text:s/>be <text:s/>reloaded with new values. <text:s/>The straight forward way of</text:p>
   <text:p text:style-name="Standard">doing that is to call spClear(), which sets the value of every <text:s/>element <text:s/>in</text:p>
   <text:p text:style-name="Standard">the <text:s/>matrix to zero. <text:s/>Sparse also provides a more flexible way to clear the</text:p>
   <text:p text:style-name="Standard">matrix. <text:s/>Using spInitialize(), it is possible to clear and reload at <text:s/>least</text:p>
   <text:p text:style-name="Standard">part of the matrix in one step.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse allows the user to keep initialization <text:s/>information <text:s/>with <text:s/>each</text:p>
   <text:p text:style-name="Standard">structurally <text:s/>nonzero <text:s/>matrix <text:s/>element. <text:s/>Each element has a pointer that is</text:p>
   <text:p text:style-name="Standard">set and used by the user. <text:s/>The user can set this pointer using spInstallIn-</text:p>
   <text:p text:style-name="Standard">itInfo() <text:s/>and <text:s/>may <text:s/>read it using spGetInitInfo(). <text:s/>The function spInitial-</text:p>
   <text:p text:style-name="Standard">ize() is a user customizable way to initialize the matrix. <text:s/>Passed to <text:s/>this</text:p>
   <text:p text:style-name="Standard">routine is a function pointer. <text:s/>spInitialize() sweeps through every element</text:p>
   <text:p text:style-name="Standard">in the matrix and checks the pInitInfo pointer (the user supplied pointer).</text:p>
   <text:p text:style-name="Standard">If <text:s/>the pInitInfo is NULL, which is true unless the user changes it (always</text:p>
   <text:p text:style-name="Standard">true for fill-ins), then the element is zeroed. <text:s text:c="2"/>Otherwise, <text:s/>the <text:s/>function</text:p>
   <text:p text:style-name="Standard">pointer <text:s/>is <text:s/>called and passed the pInitInfo pointer as well as the element</text:p>
   <text:p text:style-name="Standard">pointer and the external row and column numbers, allowing the user to <text:s/>ini-</text:p>
   <text:p text:style-name="Standard">tialize the matrix element and the right-hand side.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Why spInitialize() would be used over spClear() can be illustrated <text:s/>by</text:p>
   <text:p text:style-name="Standard">way <text:s/>of <text:s/>an <text:s/>example. <text:s/>Consider a circuit simulator that handles linear and</text:p>
   <text:p text:style-name="Standard">nonlinear resistors and capacitors performing a <text:s/>transient <text:s/>analysis. <text:s text:c="2"/>For</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>the <text:s/>linear <text:s/>resistors, <text:s/>a constant value is loaded into the matrix at each</text:p>
   <text:p text:style-name="Standard">time step and for each Newton iteration. <text:s/>For the linear capacitor, a value</text:p>
   <text:p text:style-name="Standard">is loaded into the matrix that is constant over Newton iterations, but is a</text:p>
   <text:p text:style-name="Standard">function of the time step and the integration method. <text:s/>The <text:s/>nonlinear <text:s/>com-</text:p>
   <text:p text:style-name="Standard">ponents <text:s/>contribute values to the matrix that change on every time step and</text:p>
   <text:p text:style-name="Standard">Newton iteration.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse allows the user to attach a data structure to each <text:s/>element <text:s/>in</text:p>
   <text:p text:style-name="Standard">the <text:s/>matrix. <text:s/>For this example, the user might attach a structure that held</text:p>
   <text:p text:style-name="Standard">several pieces of information, such as the conductance of the linear resis-</text:p>
   <text:p text:style-name="Standard">tor, <text:s/>the <text:s/>capacitance of the linear capacitor, the capacitance of the non-</text:p>
   <text:p text:style-name="Standard">linear capacitor, and perhaps past values of capacitances. <text:s/>The <text:s/>user <text:s/>also</text:p>
   <text:p text:style-name="Standard">provides <text:s/>a <text:s/>subroutine <text:s/>to <text:s/>spInitialize() <text:s/>that <text:s/>is called for each user-</text:p>
   <text:p text:style-name="Standard">created element in the matrix. <text:s/>This routine would, using <text:s/>the <text:s/>information</text:p>
   <text:p text:style-name="Standard">in <text:s/>the <text:s/>attached data structure, initialize the matrix element and perhaps</text:p>
   <text:p text:style-name="Standard">the right-hand side vector.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>In this example, the user supplied routine might load the linear <text:s/>con-</text:p>
   <text:p text:style-name="Standard">ductance <text:s/>into the matrix and multiply it by some voltage to find a current</text:p>
   <text:p text:style-name="Standard">that could be loaded into the right-hand side vector. <text:s/>For the <text:s/>capacitors,</text:p>
   <text:p text:style-name="Standard">the <text:s/>routine <text:s/>would <text:s/>first <text:s/>apply <text:s/>an <text:s/>integration method and then load the</text:p>
   <text:p text:style-name="Standard">matrix and the right-hand side.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>This approach is useful for two reasons. <text:s/>First, much of the <text:s/>work <text:s/>of</text:p>
   <text:p text:style-name="Standard">the device code in the simulator can be off-loaded onto the matrix package.</text:p>
   <text:p text:style-name="Standard">Since there are usually many devices, this usually <text:s/>results <text:s/>overall <text:s/>in <text:s/>a</text:p>
   <text:p text:style-name="Standard">simpler <text:s/>system. <text:s text:c="2"/>Second, <text:s/>the <text:s/>integration <text:s/>method can be hidden from the</text:p>
   <text:p text:style-name="Standard">simulator device code. <text:s/>Thus the integration method can be <text:s/>changed <text:s/>simply</text:p>
   <text:p text:style-name="Standard">by <text:s/>changing <text:s/>the <text:s/>routine <text:s/>handed <text:s/>to <text:s/>spInitialize(), resulting in a much</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 8 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">cleaner and more easily maintained simulator.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">2.5: <text:s/>Indices</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>By far the most common errors made when using Sparse <text:s/>are <text:s/>related <text:s/>to</text:p>
   <text:p text:style-name="Standard">array <text:s/>indices. <text:s/>Sparse itself contributes to the problem by having several</text:p>
   <text:p text:style-name="Standard">different indexing schemes. <text:s/>There are three different options that <text:s/>affect</text:p>
   <text:p text:style-name="Standard">index <text:s text:c="2"/>bounds <text:s text:c="2"/>or <text:s text:c="2"/>the <text:s/>way <text:s/>indices <text:s/>are <text:s/>interpreted. <text:s text:c="2"/>The <text:s/>first <text:s/>is</text:p>
   <text:p text:style-name="Standard">ARRAY OFFSET, which only affects array indices. <text:s/>ARRAY OFFSET is a compiler</text:p>
   <text:p text:style-name="Standard">flag <text:s/>that <text:s/>selects <text:s/>whether arrays start at index zero or index one. <text:s/>Note</text:p>
   <text:p text:style-name="Standard">that if ARRAY OFFSET is zero then RHS[0] corresponds <text:s/>to <text:s/>row <text:s/>one <text:s/>in <text:s/>the</text:p>
   <text:p text:style-name="Standard">matrix <text:s/>and <text:s/>Solution[0] corresponds to column one. <text:s/>Further note that when</text:p>
   <text:p text:style-name="Standard">ARRAY OFFSET is set to one, then the allocated length of the arrays <text:s/>handed</text:p>
   <text:p text:style-name="Standard">to <text:s/>the <text:s/>Sparse routines should be at least the external size of the matrix</text:p>
   <text:p text:style-name="Standard">plus one. <text:s/>The main utility of ARRAY OFFSET is that it allows natural array</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>indexing <text:s/>when Sparse is coupled to programs in other languages. <text:s/>For exam-</text:p>
   <text:p text:style-name="Standard">ple; in FORTRAN arrays always start at one whereas in C array always <text:s/>start</text:p>
   <text:p text:style-name="Standard">at <text:s/>zero. <text:s text:c="2"/>Thus <text:s/>the <text:s/>first <text:s/>entry <text:s/>in <text:s/>a FORTRAN array corresponds to the</text:p>
   <text:p text:style-name="Standard">zero&apos;th entry in a C array. <text:s/>Setting ARRAY OFFSET to zero allows the arrays</text:p>
   <text:p text:style-name="Standard">in <text:s/>FORTRAN <text:s/>to start at one rather than two. <text:s/>For the rest of this discus-</text:p>
   <text:p text:style-name="Standard">sion, assume that ARRAY OFFSET is set so that arrays start at <text:s/>one <text:s/>in <text:s/>the</text:p>
   <text:p text:style-name="Standard">program that calls Sparse.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The second option that affects indices is EXPANDABLE. <text:s/>When EXPANDABLE</text:p>
   <text:p text:style-name="Standard">is <text:s/>set <text:s/>false <text:s/>the <text:s/>upper bound on array and matrix indices is Size, where</text:p>
   <text:p text:style-name="Standard">Size is a parameter handed to spCreate(). <text:s/>When EXPANDABLE set <text:s/>true, <text:s/>then</text:p>
   <text:p text:style-name="Standard">there <text:s/>is essentially no upper bound on array indices. <text:s/>Indeed, the size of</text:p>
   <text:p text:style-name="Standard">the matrix is determined by the largest row <text:s/>or <text:s/>column <text:s/>number <text:s/>handed <text:s/>to</text:p>
   <text:p text:style-name="Standard">Sparse. <text:s text:c="2"/>The <text:s/>upper <text:s/>bound on the array indices then equals the final size</text:p>
   <text:p text:style-name="Standard">determined by Sparse. <text:s/>This size can be determined by calling spGetSize().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The final option that affects indices is TRANSLATE. <text:s/>This <text:s/>option <text:s/>was</text:p>
   <text:p text:style-name="Standard">provided to allow row and columns to be deleted, but it also allows row and</text:p>
   <text:p text:style-name="Standard">column numbers to be missing from the input description for a matrix. <text:s/>This</text:p>
   <text:p text:style-name="Standard">means <text:s/>that <text:s/>the size of the matrix is not determined by the largest row or</text:p>
   <text:p text:style-name="Standard">column number entered into the matrix. <text:s/>Rather, the size is <text:s/>determined <text:s/>by</text:p>
   <text:p text:style-name="Standard">the <text:s/>total <text:s/>number of rows or column entered. <text:s/>For example, if the elements</text:p>
   <text:p text:style-name="Standard">[2,3], [5,3], and [7,2] are entered into the matrix, the internal <text:s/>size <text:s/>of</text:p>
   <text:p text:style-name="Standard">the <text:s/>matrix <text:s/>becomes <text:s/>four <text:s/>while the external size is seven. <text:s/>The internal</text:p>
   <text:p text:style-name="Standard">size equals the number of rows and columns in the matrix while the external</text:p>
   <text:p text:style-name="Standard">size equals the largest row or column number entered into the matrix. <text:s/>Note</text:p>
   <text:p text:style-name="Standard">that if a row is entered into the matrix, then its corresponding column <text:s/>is</text:p>
   <text:p text:style-name="Standard">also <text:s/>entered, <text:s/>and <text:s/>vice <text:s/>versa. <text:s/>The indices used in the RHS and Solution</text:p>
   <text:p text:style-name="Standard">vectors correspond to the row and column indices in the matrix. <text:s/>Thus, <text:s/>for</text:p>
   <text:p text:style-name="Standard">this <text:s/>example, <text:s/>valid <text:s/>data <text:s/>is expected in RHS at locations 2, 3, 5 and 7.</text:p>
   <text:p text:style-name="Standard">Data at other locations is ignored. <text:s/>Similarly, valid data is <text:s/>returned <text:s/>in</text:p>
   <text:p text:style-name="Standard">Solution <text:s/>at <text:s/>locations <text:s/>2, <text:s/>3, <text:s/>5, <text:s/>and <text:s/>7. <text:s text:c="2"/>The other locations are left</text:p>
   <text:p text:style-name="Standard">unmolested. <text:s/>This shows that the length of the <text:s/>arrays <text:s/>correspond <text:s/>to <text:s/>the</text:p>
   <text:p text:style-name="Standard">external size of the matrix. <text:s/>Again, this value can be determined by spGet-</text:p>
   <text:p text:style-name="Standard">Size().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 9 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">2.6: <text:s/>Configuring Sparse</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>It is possible at compile-time to customize Sparse for your particular</text:p>
   <text:p text:style-name="Standard">application. <text:s/>This is done by changing the compiler options, which are kept</text:p>
   <text:p text:style-name="Standard">in the personality file, spConfig.h. <text:s/>There are three <text:s/>classes <text:s/>of <text:s/>choices</text:p>
   <text:p text:style-name="Standard">available. <text:s text:c="2"/>First <text:s/>are the Sparse options, which specify the dominant per-</text:p>
   <text:p text:style-name="Standard">sonality characteristics, such as if real and/or complex systems <text:s/>of <text:s/>equa-</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>tions are to be handled. <text:s/>The second class is the Sparse constants, such as</text:p>
   <text:p text:style-name="Standard">the default pivot threshold and the amount of <text:s/>memory <text:s/>initially <text:s/>allocated</text:p>
   <text:p text:style-name="Standard">per <text:s/>matrix. <text:s text:c="2"/>The last class is the machine constants. <text:s/>These numbers must</text:p>
   <text:p text:style-name="Standard">be updated when Sparse is ported to another machine.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>As an aid in the setup and <text:s/>testing <text:s/>of <text:s/>Sparse <text:s/>a <text:s/>test <text:s/>routine <text:s/>and</text:p>
   <text:p text:style-name="Standard">several <text:s/>test <text:s/>matrices <text:s/>and <text:s/>their solutions have been provided. <text:s/>The test</text:p>
   <text:p text:style-name="Standard">routine is <text:s/>capable <text:s/>of <text:s/>reading <text:s/>files <text:s/>generated <text:s/>by <text:s/>spFileMatrix() <text:s/>and</text:p>
   <text:p text:style-name="Standard">spFileVector().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>By default Sparse stores all real numbers and <text:s/>performs <text:s/>all <text:s/>computa-</text:p>
   <text:p text:style-name="Standard">tions <text:s/>using <text:s/>double precision arithmetic. <text:s/>This can be changed by changing</text:p>
   <text:p text:style-name="Standard">the definition of spREAL from <text:s/>double <text:s/>to <text:s/>float. <text:s text:c="2"/>spREAL <text:s/>is <text:s/>defined <text:s/>in</text:p>
   <text:p text:style-name="Standard">spExports.h.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 10 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">3: <text:s/>INTRODUCTION TO THE SPARSE ROUTINES</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">In this section the routines are grouped by function and briefly described.</text:p>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">3.1: <text:s/>Creating the Matrix</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spCreate()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Allocates and initializes the data structure for a matrix. <text:s/>Necessari-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>ly the first routine run for any particular matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spDestroy()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Destroys the data structure for a matrix and frees the memory.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spSetReal()</text:p>
   <text:p text:style-name="Standard">spSetComplex()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>These routines toggle a flag internal to Sparse <text:s/>that <text:s/>indicates <text:s/>that</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>the matrix is either real or complex. <text:s/>This is useful if both real and</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>complex matrices of identical structure are expected.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">3.2: <text:s/>Building the Matrix</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spGetElement()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Assures that the specified element exists in the matrix data structure</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>and returns a pointer to it.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spGetAdmittance()</text:p>
   <text:p text:style-name="Standard">spGetQuad()</text:p>
   <text:p text:style-name="Standard">spGetOnes()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>These routines add a group of four related <text:s/>elements <text:s/>to <text:s/>the <text:s/>matrix.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spGetAdmittance() <text:s/>adds the four elements associated with a two termi-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>nal admittance. <text:s/>spGetQuad() is a more general routine that is <text:s/>useful</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>for <text:s/>entering <text:s/>controlled sources to the matrix. <text:s/>spGetOnes() adds the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>four structural ones to the matrix that <text:s/>are <text:s/>often <text:s/>encountered <text:s/>with</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>elements that do not have admittance representations.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spDeleteRowAndCol()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>This function is used to delete a row and column from the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">3.3: <text:s/>Clearing the Matrix</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spClear()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sets every element in the matrix to zero.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spInitialize()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Runs a user provided initialization routine on each element in the ma-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>trix. <text:s/>This routine would be used in lieu of spClear().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spGetInitInfo()</text:p>
   <text:p text:style-name="Standard">spInstallInitInfo()</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="5"/>These routines allow the user to <text:s/>install <text:s/>and <text:s/>read <text:s/>a <text:s/>user-provided</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>pointer to initialization data for a particular matrix element.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 11 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spStripFills()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>This routine returns a matrix to a semi-virgin state by <text:s/>removing <text:s/>all</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>fill-ins. <text:s text:c="2"/>This <text:s/>can <text:s/>be useful if a matrix is to be reordered and it</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>has changed significantly since it was previously ordered. <text:s text:c="2"/>This <text:s/>may</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>be the case if a few rows and columns have been added or deleted or if</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>the previous ordering was done on a matrix that was numerically <text:s/>quite</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>different <text:s/>than <text:s/>the <text:s/>matrix <text:s/>currently being factored. <text:s/>Stripping and</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>reordering a matrix may speed subsequent factorization if the <text:s/>current</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>ordering <text:s/>is <text:s/>inferior, <text:s/>whereas simply reordering will generally only</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>enhance accuracy and not speed.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">3.4: <text:s/>Placing Data in the Matrix</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spADD REAL ELEMENT()</text:p>
   <text:p text:style-name="Standard">spADD IMAG ELEMENT()</text:p>
   <text:p text:style-name="Standard">spADD COMPLEX ELEMENT()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Adds a value to a particular matrix element.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spADD REAL QUAD()</text:p>
   <text:p text:style-name="Standard">spADD IMAG QUAD()</text:p>
   <text:p text:style-name="Standard">spADD COMPLEX QUAD()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Adds a value to a group of four matrix elements.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">3.5: <text:s/>Influencing the Factorization</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spMNA Preorder()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>This routine preorders <text:s/>modified <text:s/>node <text:s/>admittance <text:s/>matrices <text:s/>so <text:s/>that</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse <text:s/>can <text:s/>take <text:s/>full <text:s/>advantage of their structure. <text:s/>In particular,</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>this routine tries to remove zeros from the diagonal so that <text:s/>diagonal</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>pivoting can be used more successfully.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spPartition()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse partitions the matrix in an attempt to make spFactor() <text:s/>run <text:s/>as</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>fast <text:s/>as <text:s/>possible. <text:s/>The partitioning is a relatively expensive opera-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>tion that is not needed in all cases. <text:s/>spPartition() allows <text:s/>the <text:s/>user</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>specify a simpler and faster partitioning.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>spScale()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>It is sometimes desirable to scale the rows and columns of a matrix in</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>to <text:s/>achieve <text:s/>a <text:s/>better <text:s/>pivoting <text:s/>order. <text:s/>This is particularly true in</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>modified node admittance matrices, where the size of the elements in a</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>matrix <text:s/>can <text:s/>easily <text:s/>vary <text:s/>through <text:s/>ten to twelve orders of magnitude.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>This routine performs scaling on a matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">3.6: <text:s/>Factoring the Matrix</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spOrderAndFactor()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>This routine chooses a pivot order for the matrix and factors it <text:s/>into</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>LU <text:s/>form. <text:s text:c="2"/>It <text:s/>handles <text:s/>both the initial factorization and subsequent</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>factorizations when a reordering is desired.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 12 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spFactor()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Factors a matrix that has already been ordered by <text:s/>spOrderAndFactor().</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>If spFactor() is passed a matrix that needs ordering, it will automat-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>ically pass the matrix to spOrderAndFactor().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">3.7: <text:s/>Solving the Matrix Equation</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spSolve()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Solves the matrix equation</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="6"/>Ax = b</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>given the matrix A factored into LU form and b.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spSolveTransposed()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>When working with adjoint systems, such as in sensitivity analysis, it</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>is desirable to quickly solve</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="7"/>T</text:p>
   <text:p text:style-name="Standard"><text:s text:c="6"/>A x = b</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Once A has been factored into LU form, this routine <text:s/>can <text:s/>be <text:s/>used <text:s/>to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>solve <text:s/>the transposed system without having to suffer the cost of fac-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>toring the matrix again.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:soft-page-break/>3.8: <text:s/>Numerical Error Estimation</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spCondition()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Estimates the L-infinity condition number of the matrix. <text:s/>This <text:s/>number</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>is <text:s/>a <text:s/>measure <text:s/>of the ill-conditioning in the matrix equation. <text:s/>It is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>also useful for making estimates of the error in the solution.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spNorm()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Returns the L-infinity norm (the maximum absolute row sum) of <text:s/>an <text:s/>un-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>factored matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spPseudoCondition()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Returns the ratio of the largest pivot to the smallest pivot of a fac-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>tored <text:s/>matrix. <text:s text:c="2"/>This <text:s/>is a rough indicator of ill-conditioning in the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spLargestElement()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>If passed an unfactored matrix, <text:s/>this <text:s/>routine <text:s/>returns <text:s/>the <text:s/>absolute</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>value <text:s/>of the largest element in the matrix. <text:s/>If passed a factored ma-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>trix, it returns an estimate of the largest element that <text:s/>occurred <text:s/>in</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>any of the reduced submatrices during the factorization. <text:s/>The ratio of</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>these two numbers (factored/unfactored) is the growth, which <text:s/>is <text:s/>used</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>to determine if the pivoting order is numerically satisfactory.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spRoundoff()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Returns a bound on the magnitude of the largest element <text:s/>in <text:s/>E = A-LU,</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>where <text:s/>E <text:s/>represents error in the matrix resulting from roundoff error</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>during the factorization.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 13 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">3.9: <text:s/>Matrix Operations</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spDeterminant()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>This routine simply calculates and returns the determinant of the fac-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>tored matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spMultiply()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>This routine multiplys the matrix by a vector on the right. <text:s text:c="2"/>This <text:s/>is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>useful <text:s/>for forming the product Ax = b in order to determine if a cal-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>culated solution is correct.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spMultTransposed()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Multiplys the transposed matrix by a vector on <text:s/>the <text:s/>right. <text:s text:c="2"/>This <text:s/>is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>useful <text:s/>for <text:s/>forming <text:s/>the <text:s/>product <text:s/>A <text:s/>sup {roman T} x = b in order to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>determine if a calculated solution is correct.</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">3.10: <text:s/>Matrix Statistics and Documentation</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spError()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Determines the error status of a particular matrix. <text:s/>While most of the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse <text:s/>routines <text:s/>do <text:s/>return an indication that an error has occurred,</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>some do not and so spError() provides the only way of uncovering these</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>errors.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spWhereSingular()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Returns the row and column number where the <text:s/>matrix <text:s/>was <text:s/>detected <text:s/>as</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>singular or where a zero pivot was found.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spGetSize()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>A function that returns the size of the matrix. <text:s/>Either <text:s/>the <text:s/>internal</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>or <text:s/>external size of the matrix is returned. <text:s/>The internal size of the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>matrix is the actual size of the matrix whereas the external <text:s/>size <text:s/>is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>the <text:s/>value of the largest row or column number. <text:s/>These two numbers may</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>differ if the TRANSLATE option is used.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spElementCount()</text:p>
   <text:p text:style-name="Standard">spFillinCount()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Functions that return the total number of elements in the matrix, <text:s/>and</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>the <text:s/>number of fill-ins in the matrix. <text:s/>These functions are useful for</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>gathering statistics on matrices.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spPrint()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>This routine outputs the matrix as well as some statistics to standard</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>output <text:s/>in <text:s/>a <text:s/>format <text:s/>that <text:s/>is readable by people. <text:s/>The matrix can be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>printed in either a compressed or standard format. <text:s text:c="2"/>In <text:s/>the <text:s/>standard</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>format, <text:s/>a <text:s/>numeric <text:s/>value is given for each structurally nonzero ele-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>ment, whereas in the compressed format, only the existence <text:s/>or <text:s/>nonex-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>istence <text:s/>of an element is indicated. <text:s/>This routine is not suitable for</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>use on large matrices.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 14 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spFileMatrix()</text:p>
   <text:p text:style-name="Standard">spFileVector()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>These two routines send a copy of the matrix and its <text:s/>right-hand <text:s/>side</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>vector to a file. <text:s/>This file can then be read by the test program that</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>is included with Sparse. <text:s/>Only those elements of the matrix <text:s/>that <text:s/>are</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="5"/>structurally nonzero are output, so very large matrices can be sent to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>a file.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spFileStats()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>This routine calculates and sends some useful statistics concerning <text:s/>a</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>matrix to a file.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 15 -</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">4: <text:s/>SPARSE ROUTINES</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This section contains a complete list <text:s/>of <text:s/>the <text:s/>Sparse <text:s/>routines <text:s/>that <text:s/>are</text:p>
   <text:p text:style-name="Standard">available <text:s/>to <text:s/>the <text:s/>user. <text:s/>Each routine is described as to its function and</text:p>
   <text:p text:style-name="Standard">how to use it. <text:s/>The routines are listed in alphabetic order.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.1: <text:s/>spClear()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Sets every element in the matrix <text:s/>to <text:s/>zero. <text:s text:c="2"/>The <text:s/>Sparse <text:s/>error <text:s/>state <text:s/>is</text:p>
   <text:p text:style-name="Standard">cleared to spOKAY in this routine.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spClear( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix that is to be cleared.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 16 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.2: <text:s/>spCondition()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spCondition() computes an estimate of the condition number using <text:s/>a <text:s/>varia-</text:p>
   <text:p text:style-name="Standard">tion <text:s/>on <text:s/>the LINPACK condition number estimation algorithm. <text:s/>This quantity</text:p>
   <text:p text:style-name="Standard">is an measure of ill-conditioning in the matrix. <text:s/>To <text:s/>avoid <text:s/>problems <text:s/>with</text:p>
   <text:p text:style-name="Standard">overflow, <text:s/>the <text:s/>reciprocal <text:s/>of <text:s/>the <text:s/>condition number is returned. <text:s/>If this</text:p>
   <text:p text:style-name="Standard">number is small, and if the matrix is scaled such that uncertainties in the</text:p>
   <text:p text:style-name="Standard">RHS <text:s/>and <text:s/>the <text:s/>matrix <text:s/>entries <text:s/>are <text:s/>equilibrated, <text:s/>then the matrix is ill-</text:p>
   <text:p text:style-name="Standard">conditioned. <text:s/>If the this number is near one, the <text:s/>matrix <text:s/>is <text:s/>well <text:s/>condi-</text:p>
   <text:p text:style-name="Standard">tioned. <text:s/>This routine must only be used after a matrix has been factored by</text:p>
   <text:p text:style-name="Standard">spOrderAndFactor() or spFactor() and before it is cleared by <text:s/>spClear() <text:s/>or</text:p>
   <text:p text:style-name="Standard">spInitialize().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Unlike the LINPACK condition number estimator, this routines returns the <text:s/>L</text:p>
   <text:p text:style-name="Standard">infinity <text:s/>condition <text:s/>number. <text:s/>This is an artifact of Sparse placing ones on</text:p>
   <text:p text:style-name="Standard">the diagonal of the upper triangular matrix rather than <text:s/>the <text:s/>lower. <text:s text:c="2"/>This</text:p>
   <text:p text:style-name="Standard">difference should be of no importance.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spREAL spCondition( Matrix, NormOfMatrix, Error )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>An estimate of the L infinity condition number of the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The matrix for which the condition number is desired.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>NormOfMatrix <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The L-infinity norm of <text:s/>the <text:s/>unfactored <text:s/>matrix <text:s/>as <text:s/>computed <text:s/>by</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>spNorm().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Error <text:s/>output <text:s/>(int *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Used to return the error code.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Possible errors:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spSINGULAR</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spNO MEMORY</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Error is not cleared in this routine.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>CONDITION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 17 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.3: <text:s/>spCreate()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Allocates and initializes the data structures <text:s/>associated <text:s/>with <text:s/>a <text:s/>matrix.</text:p>
   <text:p text:style-name="Standard">This <text:s/>routine <text:s/>is <text:s/>necessarily the first routine run for any particular ma-</text:p>
   <text:p text:style-name="Standard">trix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">char *spCreate( Size, Complex, Error )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returned:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>A pointer to the matrix is returned cast into the form of a pointer to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>a character. <text:s/>This pointer is then passed and used by the other matrix</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>routines to refer to a particular matrix. <text:s/>If <text:s/>an <text:s/>error <text:s/>occurs, <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>NULL pointer is returned.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Size <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Size of matrix. <text:s/>When the compiler option <text:s/>EXPANDABLE <text:s/>is <text:s/>turned</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>on, <text:s/>Size <text:s/>is <text:s/>used <text:s/>as <text:s/>a lower bound on the size of the matrix.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Size must not be negative.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Complex <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Type of matrix. <text:s/>If Complex is 0 then the matrix is real, <text:s/>other-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>wise <text:s/>the <text:s/>matrix will be complex. <text:s/>Note that if the routines are</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>not set up to handle the type of matrix requested, then a spPANIC</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>error will occur.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Error <text:s/>output <text:s/>(int *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Returns error flag, needed because function <text:s/>spError() <text:s/>will <text:s/>not</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>work correctly if spCreate() returns NULL.</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">o Possible errors:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spNO MEMORY</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spPANIC</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 18 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.4: <text:s/>spDeleteRowAndCol()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This function is used to delete a row and column from the matrix. <text:s/>The ele-</text:p>
   <text:p text:style-name="Standard">ments <text:s/>removed from the matrix are never used again and are not freed until</text:p>
   <text:p text:style-name="Standard">the matrix is destroyed and so the pointers to these elements remain valid.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spDeleteRowAndCol( Matrix, Row, Col )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The matrix from which the row and column are to be deleted.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Row <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The row to be deleted.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Col <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The column to be deleted.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="5"/>DELETE</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>TRANSLATE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.5: <text:s/>spDestroy()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Destroys a matrix frame and reclaims the memory.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spDestroy( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix frame which is to be removed from memory.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 19 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.6: <text:s/>spDeterminant()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This routine in capable of calculating the determinant of the <text:s/>matrix <text:s/>once</text:p>
   <text:p text:style-name="Standard">the <text:s/>LU <text:s/>factorization <text:s/>has <text:s/>been <text:s/>performed. <text:s/>Hence, only use this routine</text:p>
   <text:p text:style-name="Standard">after spFactor() or spOrderAndFactor() and before spClear() <text:s/>or <text:s/>spInitial-</text:p>
   <text:p text:style-name="Standard">ize(). <text:s text:c="2"/>Note <text:s/>that <text:s/>the determinants of matrices can be very large or very</text:p>
   <text:p text:style-name="Standard">small. <text:s/>On large matrices, the determinant can be <text:s/>far <text:s/>larger <text:s/>or <text:s/>smaller</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>than <text:s/>can <text:s/>be <text:s/>represented by a floating point number. <text:s/>For this reason the</text:p>
   <text:p text:style-name="Standard">mantissa and exponent of the determinant are returned separately.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spDeterminant( Matrix, Exponent, Determinant )</text:p>
   <text:p text:style-name="Standard">void spDeterminant( Matrix, Exponent, Determinant, iDeterminant )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The matrix for which the determinant is desired.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Exponent <text:s/>output <text:s/>(int *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The logarithm base 10 of the scale factor <text:s/>for <text:s/>the <text:s/>determinant.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>To <text:s/>find <text:s/>the actual determinant, Exponent should be added to the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>exponent of Determinant and iDeterminant.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Determinant <text:s/>output <text:s/>(spREAL *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The real portion of the determinant. <text:s/>If the matrix is real, then</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>the <text:s/>magnitude <text:s/>of <text:s/>this <text:s/>number <text:s/>is scaled to be greater than or</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>equal to 1.0 and less than 10.0. Otherwise the magnitude <text:s/>of <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>complex determinant will be scaled such.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>iDeterminant <text:s/>output <text:s/>(spREAL *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The imaginary portion of the determinant. <text:s text:c="2"/>When <text:s/>the <text:s/>matrix <text:s/>is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>real this pointer need not be supplied; nothing will be returned.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>DETERMINANT</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Bugs:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The sign of determinant may be in error if rows and columns have <text:s/>been</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>added or deleted from matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 20 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.7: <text:s/>spElementCount()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Returns the total number of structurally nonzero elements in the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int spElementCount( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The total number of structurally nonzero elements.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">4.8: <text:s/>spError()</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This function returns the error status of a matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int MatrixError( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returned:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The error status of the given matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The matrix for which the error status is desired.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Possible errors:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spOKAY</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spILL CONDITIONED</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spZERO PIVOT</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spSINGULAR</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spNO MEMORY</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spPANIC</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Error is not cleared in this routine.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 21 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.9: <text:s/>spFactor()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This routine factors the matrix into LU form and is the <text:s/>companion <text:s/>routine</text:p>
   <text:p text:style-name="Standard">to spOrderAndFactor(). <text:s/>Unlike spOrderAndFactor(), spFactor() cannot change</text:p>
   <text:p text:style-name="Standard">the ordering. <text:s/>Its utility is that it is considerably faster. <text:s/>The standard</text:p>
   <text:p text:style-name="Standard">way <text:s/>to <text:s/>use <text:s/>these two routines is to first use spOrderAndFactor() for the</text:p>
   <text:p text:style-name="Standard">initial factorization. <text:s/>For subsequent factorizations, spFactor() is <text:s/>used.</text:p>
   <text:p text:style-name="Standard">If <text:s/>spFactor() <text:s/>is called for the initial factorization of the matrix, then</text:p>
   <text:p text:style-name="Standard">it will automatically call spOrderAndFactor() with the default <text:s/>thresholds.</text:p>
   <text:p text:style-name="Standard">If <text:s/>spFactor() <text:s/>finds <text:s/>a <text:s/>zero on the diagonal, it will terminate early and</text:p>
   <text:p text:style-name="Standard">complain. <text:s/>This does not necessarily mean that matrix is singular. <text:s text:c="2"/>Before</text:p>
   <text:p text:style-name="Standard">a <text:s/>matrix <text:s/>is <text:s/>condemned <text:s/>as being singular, it should be run through spOr-</text:p>
   <text:p text:style-name="Standard">derAndFactor(), which can reorder the matrix and remove the offensive <text:s/>zero</text:p>
   <text:p text:style-name="Standard">from the diagonal.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int spFactor( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returned:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The error code is returned. <text:s/>Possible errors are listed below.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix to be factored.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Possible errors:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spZERO PIVOT</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spNO MEMORY</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spSINGULAR</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spILL CONDITIONED</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 22 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.10: <text:s/>spFileMatrix()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Writes matrix to file in format suitable to be read back in by <text:s/>the <text:s/>matrix</text:p>
   <text:p text:style-name="Standard">test <text:s/>program. <text:s text:c="2"/>Normally, spFileMatrix() should be executed before the ma-</text:p>
   <text:p text:style-name="Standard">trix is factored, otherwise matrix is output in factored form. <text:s/>If the <text:s/>ma-</text:p>
   <text:p text:style-name="Standard">trix <text:s/>is <text:s/>sent <text:s/>to <text:s/>a file without the header or data, it will be in a form</text:p>
   <text:p text:style-name="Standard">that is easily plotted by typical plotting programs.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int spFileMatrix( Matrix, File, Label, Reordered, Data, Header )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>One is returned if routine was successful, otherwise zero is returned.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The <text:s/>calling <text:s/>function <text:s/>can query errno (the system global error vari-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>able) as to the reason why this routine failed.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix that is to be sent to file.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>File <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Name of output file.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Label <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>String that is transferred to file and used as a <text:s/>label. <text:s text:c="2"/>String</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>should fit on one line and have no embedded line feeds.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Reordered <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Specifies whether the matrix should be output using the <text:s/>original</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>order or in reordered form. <text:s/>Zero specifies original order.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Data <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Indicates that the element values should be output along with the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>indices <text:s/>for each element. <text:s/>Element values are not output if Data</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>is zero. <text:s/>This parameter must be nonzero if matrix is to be <text:s/>read</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="10"/>by the Sparse test program.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Header <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>If nonzero a header is output that includes that size of the <text:s/>ma-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>trix <text:s/>and the label. <text:s/>This parameter must be nonzero if matrix is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>to be read by the Sparse test program.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>DOCUMENTATION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 23 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.11: <text:s/>spFileStats()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Appends useful information concerning the matrix to the end of a file. <text:s text:c="2"/>If</text:p>
   <text:p text:style-name="Standard">file <text:s/>does <text:s/>not <text:s/>exist, it is created. <text:s/>This file should not be the same as</text:p>
   <text:p text:style-name="Standard">one used to hold the matrix or vector if the matrix is to be <text:s/>read <text:s/>by <text:s/>the</text:p>
   <text:p text:style-name="Standard">Sparse test program. <text:s/>Should be executed after the matrix is factored.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int spFileStats( Matrix, File, Label )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>One is returned if routine was successful, otherwise zero is returned.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The <text:s/>calling <text:s/>function <text:s/>can query errno (the system global error vari-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>able) as to the reason why this routine failed.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix for which statistics are desired.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>File <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Name of output file.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Label <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>String that is transferred to file and is used as a label. String</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>should fit on one line and have no embedded line feeds.</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>DOCUMENTATION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 24 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.12: <text:s/>spFileVector()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Appends the RHS vector to the end of a file in a format suitable to be read</text:p>
   <text:p text:style-name="Standard">back in by the matrix test program. <text:s/>If file does not exist, it is created.</text:p>
   <text:p text:style-name="Standard">To be compatible with the test program, if spFileVector() is run, <text:s/>it <text:s/>must</text:p>
   <text:p text:style-name="Standard">be run after spFileMatrix() and use the same file.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int spFileVector( Matrix, File, RHS )</text:p>
   <text:p text:style-name="Standard">int spFileVector( Matrix, File, RHS, iRHS )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>One is returned if routine was successful, otherwise zero is returned.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The <text:s/>calling <text:s/>function <text:s/>can query errno (the system global error vari-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>able) as to the reason why this routine failed.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix that corresponds to the vector to be output.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>File <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Name of file where output is to be written.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>RHS <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The right-hand side vector. <text:s/>RHS contains only the <text:s/>real <text:s/>portion</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>of <text:s/>the <text:s/>right-hand <text:s/>side <text:s/>vector <text:s/>if <text:s/>the <text:s/>matrix is complex and</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>spSEPARATED COMPLEX VECTORS is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>iRHS <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Right-hand side vector, imaginary portion. <text:s/>Not necessary if <text:s/>ma-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>trix is real or if spSEPARATED COMPLEX VECTORS is set false.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>DOCUMENTATION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 25 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.13: <text:s/>spFillinCount()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Returns the total number of fill-ins in the matrix. <text:s/>A fill-in is <text:s/>an <text:s/>ele-</text:p>
   <text:p text:style-name="Standard">ment <text:s/>that <text:s/>is originally structurally zero, but becomes nonzero during the</text:p>
   <text:p text:style-name="Standard">factorization.</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">int spFillinCount( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The total number of fill-ins.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 26 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.14: <text:s/>spGetAdmittance()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Performs same function as spGetElement() except rather <text:s/>than <text:s/>one <text:s/>element,</text:p>
   <text:p text:style-name="Standard">all four matrix elements for a floating admittance are reserved. <text:s/>This rou-</text:p>
   <text:p text:style-name="Standard">tine also works if the admittance is grounded (zero is <text:s/>the <text:s/>ground <text:s/>node).</text:p>
   <text:p text:style-name="Standard">This function returns a group of pointers to the four elements through Tem-</text:p>
   <text:p text:style-name="Standard">plate, which is an output. <text:s/>They are used by <text:s/>the <text:s/>spADD QUAD() <text:s/>macros <text:s/>to</text:p>
   <text:p text:style-name="Standard">directly <text:s/>access <text:s/>matrix <text:s/>elements <text:s/>during <text:s/>subsequent loads of the matrix.</text:p>
   <text:p text:style-name="Standard">spGetAdmittance() <text:s/>arranges <text:s/>the <text:s/>pointers <text:s/>in <text:s text:c="2"/>Template <text:s text:c="2"/>so <text:s text:c="2"/>that <text:s text:c="2"/>the</text:p>
   <text:p text:style-name="Standard">spADD QUAD() <text:s/>routines <text:s/>add the admittance to the elements at [Node1,Node1]</text:p>
   <text:p text:style-name="Standard">and <text:s/>[Node2,Node2] <text:s/>and <text:s/>subtract <text:s/>the <text:s/>admittance <text:s/>from <text:s/>the <text:s/>elements <text:s/>at</text:p>
   <text:p text:style-name="Standard">[Node1,Node2] <text:s/>and <text:s/>[Node2,Node1]. <text:s/>This <text:s/>routine is only to be used before</text:p>
   <text:p text:style-name="Standard">spMNA Preorder(), spFactor() or spOrderAndFactor() unless the compiler flag</text:p>
   <text:p text:style-name="Standard">TRANSLATE is enabled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int spGetAdmittance( Matrix, Node1, Node2, Template )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returned:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The error <text:s/>code <text:s/>is <text:s/>returned. <text:s text:c="2"/>Possible <text:s/>errors <text:s/>are <text:s/>listed <text:s/>below.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spGetAdmittance() does not clear the error state, so it is possible to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>ignore the return code of each spGetAdmittance() call, and <text:s/>check <text:s/>for</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>errors after constructing the whole matrix by calling spError().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix that admittance is to be installed.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Node1 <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>One node number for the admittance. <text:s/>Node1 must be in <text:s/>the <text:s/>range</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>[0..Size] <text:s/>unless <text:s/>either <text:s/>the <text:s/>TRANSLATE <text:s/>or EXPANDABLE compiler</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>flags are set true. <text:s/>In either case Node1 must not be negative.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Node2 <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Other node number for the admittance. <text:s/>Node2 must be in the range</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>[0..Size] <text:s/>unless <text:s/>either <text:s/>the <text:s/>TRANSLATE <text:s/>or EXPANDABLE compiler</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>flags are set true. <text:s/>In either case Node2 must not be negative.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Template <text:s/>output <text:s/>(struct spTemplate *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Collection of pointers to four elements that are <text:s/>later <text:s/>used <text:s/>to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>directly <text:s/>address <text:s/>elements. <text:s/>User must supply the template, this</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>routine will fill it.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Possible errors:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spNO MEMORY</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Error is not cleared in this routine.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>QUAD ELEMENT</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 27 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.15: <text:s/>spGetElement()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Reserves an element at [Row,Col] and returns a pointer to it. <text:s text:c="2"/>If <text:s/>element</text:p>
   <text:p text:style-name="Standard">is <text:s/>not found then it is created and spliced into matrix. <text:s/>A pointer to the</text:p>
   <text:p text:style-name="Standard">real portion of the element is returned. <text:s/>This pointer is later used by the</text:p>
   <text:p text:style-name="Standard">spADD ELEMENT() <text:s/>macros <text:s/>to <text:s/>directly <text:s/>access the element. <text:s/>This routine is</text:p>
   <text:p text:style-name="Standard">only to be used before spMNA Preorder(), spFactor() <text:s/>or <text:s/>spOrderAndFactor()</text:p>
   <text:p text:style-name="Standard">unless the compiler option TRANSLATE is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spREAL *spGetElement( Matrix, Row, Col )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returned:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Returns a pointer to the <text:s/>element. <text:s text:c="2"/>This <text:s/>pointer <text:s/>is <text:s/>then <text:s/>used <text:s/>to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>directly access the element during successive builds. <text:s/>Returns NULL if</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>insufficient memory is available. <text:s/>spGetElement() does not <text:s/>clear <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>error <text:s/>state, <text:s/>so <text:s/>it <text:s/>is <text:s/>possible <text:s/>to ignore the return code of each</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spGetElement() call, and check for errors after constructing the whole</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>matrix by calling spError().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix that the element is to be added to.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Row <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Row index for element. Row must be in the range [0..Size] <text:s/>unless</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>either <text:s/>the <text:s/>TRANSLATE or EXPANDABLE compiler flags are set true.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>In either case Row must not be negative though it <text:s/>may <text:s/>be <text:s/>zero.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>If <text:s/>zero <text:s/>then the element is not entered into the matrix, but is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>otherwise treated normally.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Col <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Column index for element. Col must be in the range [0..Size] <text:s/>un-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>less <text:s/>either <text:s/>the <text:s/>TRANSLATE or EXPANDABLE compiler flags are set</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>true. <text:s/>In either case Col must not be negative though it <text:s/>may <text:s/>be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>zero. <text:s text:c="2"/>If <text:s/>zero then the element is not entered into the matrix,</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>but is otherwise treated normally.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Possible errors:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spNO MEMORY</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Error is not cleared in this routine.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 28 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.16: <text:s/>spGetInitInfo()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">With the INITIALIZE compiler option enabled Sparse allows the user to <text:s/>keep</text:p>
   <text:p text:style-name="Standard">initialization <text:s/>information <text:s/>with each structurally nonzero matrix element.</text:p>
   <text:p text:style-name="Standard">Each element has a pointer (referred to as pInitInfo) that is set and <text:s/>used</text:p>
   <text:p text:style-name="Standard">by <text:s/>the user. <text:s/>This routine returns pInitInfo from a particular matrix ele-</text:p>
   <text:p text:style-name="Standard">ment.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">char *spGetInitInfo( pElement )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returned:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The user installed pointer pInitInfo.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>pElement <text:s/>input <text:s/>(spREAL *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the element to which pInitInfo is attached.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>INITIALIZE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 29 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.17: <text:s/>spGetOnes()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Performs a similar function <text:s/>to <text:s/>spGetAdmittance() <text:s/>except <text:s/>that <text:s/>the <text:s/>four</text:p>
   <text:p text:style-name="Standard">reserved <text:s/>matrix <text:s/>elements <text:s/>are <text:s/>assumed to be structural ones generated by</text:p>
   <text:p text:style-name="Standard">components without <text:s/>admittance <text:s/>representations <text:s/>during <text:s/>a <text:s/>modified <text:s/>nodal</text:p>
   <text:p text:style-name="Standard">analysis. <text:s/>Positive ones are placed at [Pos,Eqn] and [Eqn,Pos] and negative</text:p>
   <text:p text:style-name="Standard">ones are placed at [Neg,Eqn] and [Eqn,Neg]. <text:s/>This function returns a <text:s/>group</text:p>
   <text:p text:style-name="Standard">of <text:s/>pointers <text:s/>to <text:s/>the <text:s/>four <text:s/>elements through Template, which is an output.</text:p>
   <text:p text:style-name="Standard">They are used by the spADD QUAD() macros to add the ones <text:s/>directly <text:s/>to <text:s/>the</text:p>
   <text:p text:style-name="Standard">matrix <text:s/>elements <text:s/>during <text:s/>subsequent <text:s/>loads of the matrix. <text:s/>This routine is</text:p>
   <text:p text:style-name="Standard">only to be used before spMNA Preorder(), spFactor() <text:s/>or <text:s/>spOrderAndFactor()</text:p>
   <text:p text:style-name="Standard">unless the compiler flag TRANSLATE is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int spGetOnes( Matrix, Pos, Neg, Eqn, Template )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returned:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The error <text:s/>code <text:s/>is <text:s/>returned. <text:s text:c="2"/>Possible <text:s/>errors <text:s/>are <text:s/>listed <text:s/>below.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spGetOnes() <text:s/>does <text:s/>not clear the error state, so it is possible to ig-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>nore the return code of each spGetOnes() call, and <text:s/>check <text:s/>for <text:s/>errors</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>after constructing the whole matrix by calling spError().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="10"/>Pointer to the matrix that ones are to be entered in.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Pos <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Number of positive node. <text:s/>Must be in the range of <text:s/>[0..Size] <text:s/>un-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>less <text:s/>either <text:s/>the options EXPANDABLE or TRANSLATE are used. <text:s/>Zero</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>is the ground row. <text:s/>In no case may Pos be less than zero.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Neg input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Number of negative node. <text:s/>Must be in the range of <text:s/>[0..Size] <text:s/>un-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>less either the options EXPANDABLE or TRANSLATE are used. Zero is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>the ground row. <text:s/>In no case may Neg be less than zero.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Eqn input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Row that contains the branch equation. <text:s/>Must be in the <text:s/>range <text:s/>of</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>[1..Size] <text:s/>unless <text:s/>either the options EXPANDABLE or TRANSLATE are</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>used. In no case may Eqn be less than one.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Template <text:s/>output <text:s/>(struct spTemplate *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Collection of pointers to four elements that are <text:s/>later <text:s/>used <text:s/>to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>directly <text:s/>address <text:s/>elements. <text:s/>User must supply the template, this</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>routine will fill it.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Possible errors:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spNO MEMORY</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Error is not cleared in this routine.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>QUAD ELEMENT</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 30 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 31 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.18: <text:s/>spGetQuad()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Similar to spGetAdmittance(), except that <text:s/>spGetAdmittance() <text:s/>only <text:s/>handles</text:p>
   <text:p text:style-name="Standard">2-terminal <text:s/>components, <text:s/>whereas <text:s/>spGetQuad() handles simple 4-terminals as</text:p>
   <text:p text:style-name="Standard">well. <text:s/>These 4-terminals are simply generalized 2-terminals with the option</text:p>
   <text:p text:style-name="Standard">of having the sense terminals different from the source and sink terminals.</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>spGetQuad() installs four <text:s/>elements <text:s/>into <text:s/>the <text:s/>matrix <text:s/>and <text:s/>returns <text:s/>their</text:p>
   <text:p text:style-name="Standard">pointers <text:s/>in <text:s/>the Template structure, which is an output. <text:s/>The pointers are</text:p>
   <text:p text:style-name="Standard">arranged in Template such that when passed to one of the spADD QUAD() <text:s/>mac-</text:p>
   <text:p text:style-name="Standard">ros <text:s/>along with an admittance, the admittance will be added to the elements</text:p>
   <text:p text:style-name="Standard">at <text:s/>[Row1,Col1] <text:s/>and <text:s/>[Row2,Col2] <text:s/>and <text:s/>subtracted <text:s/>from <text:s/>the <text:s/>elements <text:s/>at</text:p>
   <text:p text:style-name="Standard">[Row1,Col2] and [Row2,Col1]. <text:s/>The routine works fine if any of the rows and</text:p>
   <text:p text:style-name="Standard">columns are zero. <text:s/>This routine is only to be used before spMNA Preorder(),</text:p>
   <text:p text:style-name="Standard">spFactor() or spOrderAndFactor() unless TRANSLATE is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int spGetQuad( Matrix, Row1, Row2, Col1, Col2, Template )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returned:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The error code is returned. <text:s/>Possible errors are listed below. <text:s/>spGet-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Quad() does not clear the error state, so it is possible to ignore the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>return code of each spGetQuad() call, and check for errors after <text:s/>con-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>structing the whole matrix by calling spError().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix that quad is to be entered in.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Row1 <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>First row index for the elements. <text:s/>Row1 <text:s/>must <text:s/>be <text:s/>in <text:s/>the <text:s/>range</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>[0..Size] <text:s/>unless <text:s/>either <text:s/>the <text:s/>TRANSLATE <text:s/>or EXPANDABLE compiler</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>flags are set true. <text:s/>In either case Row1 must not be negative.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Row2 <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Second row index for the elements. <text:s/>Row2 must <text:s/>be <text:s/>in <text:s/>the <text:s/>range</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>[0..Size] <text:s/>unless <text:s/>either <text:s/>the <text:s/>TRANSLATE <text:s/>or EXPANDABLE compiler</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>flags are set true. <text:s/>In either case Row2 must not be negative.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Col1 <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>First column index for the elements. <text:s/>Col1 must be in <text:s/>the <text:s/>range</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>[0..Size] <text:s/>unless <text:s/>either <text:s/>the <text:s/>TRANSLATE <text:s/>or EXPANDABLE compiler</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>flags are set true. <text:s/>In either case Col1 must not be negative.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Col2 <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Second column index for the elements. <text:s/>Col2 must be in the <text:s/>range</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>[0..Size] <text:s/>unless <text:s/>either <text:s/>the <text:s/>TRANSLATE <text:s/>or EXPANDABLE compiler</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>flags are set true. <text:s/>In either case Col2 must not be negative.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Template <text:s/>output <text:s/>(struct spTemplate *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Collection of pointers to four elements that are <text:s/>later <text:s/>used <text:s/>to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>directly <text:s/>address <text:s/>elements. <text:s/>User must supply the template, this</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>routine will fill it.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 32 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>o Possible errors:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spNO MEMORY</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Error is not cleared in this routine.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>QUAD ELEMENT</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.19: <text:s/>spGetSize()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Returns the size of the matrix, either the internal or external size of the</text:p>
   <text:p text:style-name="Standard">matrix <text:s/>is <text:s/>returned. <text:s text:c="2"/>The <text:s/>internal size is the actual number of rows and</text:p>
   <text:p text:style-name="Standard">columns in the matrix. <text:s/>The external size is equal to the <text:s/>largest <text:s/>row <text:s/>or</text:p>
   <text:p text:style-name="Standard">column <text:s/>number. <text:s/>These numbers will be the same unless the TRANSLATE option</text:p>
   <text:p text:style-name="Standard">is enabled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int spGetSize( Matrix, External )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returned:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The size of the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix for which the size is desired.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>External <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>If External is nonzero, the external size of the <text:s/>matrix <text:s/>is <text:s/>re-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>turned, otherwise the internal size of the matrix is returned.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 33 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.20: <text:s/>spInitialize()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spInitialize() is a user customizable way to initialize the matrix. <text:s/>Passed</text:p>
   <text:p text:style-name="Standard">to this routine is a function pointer. <text:s/>spInitialize() sweeps through every</text:p>
   <text:p text:style-name="Standard">element in the matrix and checks the pInitInfo pointer (the <text:s/>user <text:s/>supplied</text:p>
   <text:p text:style-name="Standard">pointer). <text:s text:c="2"/>If the pInitInfo is NULL, which is true unless the user changes</text:p>
   <text:p text:style-name="Standard">it (always true for fill-ins), then the element is zeroed. <text:s/>Otherwise, <text:s/>the</text:p>
   <text:p text:style-name="Standard">function <text:s/>pointer is called and passed the pInitInfo pointer as well as the</text:p>
   <text:p text:style-name="Standard">element pointer and the external row and column numbers allowing <text:s/>the <text:s/>user</text:p>
   <text:p text:style-name="Standard">to set the value of each element and perhaps the right-hand side vector.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The user function (pInit()) is expected to <text:s/>return <text:s/>a <text:s/>nonzero <text:s/>integer <text:s/>if</text:p>
   <text:p text:style-name="Standard">there is a fatal error and zero otherwise. <text:s/>Upon encountering a nonzero re-</text:p>
   <text:p text:style-name="Standard">turn code, spInitialize() terminates and returns the error code.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The Sparse error state is cleared to spOKAY in this routine.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int spInitialize( Matrix, pInit )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The error code returned by pInit.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix that is to be initialized.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>pInit <text:s/>input <text:s/>((*int)())</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to a function that, given a <text:s/>pointer <text:s/>to <text:s/>an <text:s/>element, <text:s/>a</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>pointer to the users data structure containing initialization in-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>formation for that element, and the row and column number of <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>element, initializes it.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int pInit( pElement, pInitInfo, Row, Col )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Nonzero if fatal error, zero otherwise.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>pElement <text:s/>input <text:s/>(spREAL *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The pointer to the real portion of the element. <text:s/>The real portion</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>can <text:s/>be accessed using either *pElement or pElement[0]. <text:s/>The ima-</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="10"/>ginary portion can be <text:s/>accessed <text:s/>using <text:s/>either <text:s/>*(pElement+1) <text:s/>or</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>pElement[1].</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>pInitInfo <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The user-installed pointer to the initialization data structure.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Row <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The external row number of the element.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 34 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Col <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The external column number of the element.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>INITIALIZE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.21: <text:s/>spInstallInitInfo()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">With the INITIALIZE compiler option enabled Sparse allows the user to <text:s/>keep</text:p>
   <text:p text:style-name="Standard">initialization <text:s/>information <text:s/>with each structurally nonzero matrix element.</text:p>
   <text:p text:style-name="Standard">Each element has a pointer (referred to as pInitInfo) that is set and <text:s/>used</text:p>
   <text:p text:style-name="Standard">by the user. <text:s/>This routine installs the pointer pInitInfo into a particular</text:p>
   <text:p text:style-name="Standard">matrix element.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spInstallInitInfo( pElement, pInitInfo )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>pElement <text:s/>input <text:s/>(spREAL *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the element to which pInitInfo is to be attached.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>pInitInfo <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The pointer pInitInfo.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>INITIALIZE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 35 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.22: <text:s/>spLargestElement()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">If this routine is called before the matrix is factored, it returns the ab-</text:p>
   <text:p text:style-name="Standard">solute value of the largest element in the matrix. <text:s/>If called after the ma-</text:p>
   <text:p text:style-name="Standard">trix has been factored, it returns a lower bound on the absolute <text:s/>value <text:s/>of</text:p>
   <text:p text:style-name="Standard">the <text:s/>largest element that occurred in any of the reduced submatrices during</text:p>
   <text:p text:style-name="Standard">the factorization. <text:s/>The ratio of these two numbers (factored/unfactored) is</text:p>
   <text:p text:style-name="Standard">the <text:s/>growth, <text:s/>which <text:s/>can be used to determine if the pivoting order is ade-</text:p>
   <text:p text:style-name="Standard">quate. <text:s/>A large growth implies that considerable error has been made in the</text:p>
   <text:p text:style-name="Standard">factorization <text:s/>and <text:s/>that <text:s/>it is probably a good idea to reorder the matrix.</text:p>
   <text:p text:style-name="Standard">If a large growth in encountered after using <text:s/>spFactor(), <text:s/>reconstruct <text:s/>the</text:p>
   <text:p text:style-name="Standard">matrix and refactor using spOrderAndFactor(). <text:s/>If a large growth is encoun-</text:p>
   <text:p text:style-name="Standard">tered after using <text:s/>spOrderAndFactor(), <text:s/>refactor <text:s/>using <text:s/>spOrderAndFactor()</text:p>
   <text:p text:style-name="Standard">with the pivot threshold increased, say to 0.1.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spREAL spLargestElement( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>If matrix is unfactored, returns the magnitude of the largest <text:s/>element</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>in the matrix. <text:s/>If the matrix is factored, a bound on the magnitude of</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>the largest element in any of the reduced submatrices is returned.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>STABILITY</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 36 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.23: <text:s/>spMNA Preorder()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This routine massages modified node admittance matrices to improve the per-</text:p>
   <text:p text:style-name="Standard">formance <text:s/>of <text:s/>spOrderAndFactor(). <text:s/>It tries to remove structural zeros from</text:p>
   <text:p text:style-name="Standard">the diagonal by exploiting the fact that the row and column associated with</text:p>
   <text:p text:style-name="Standard">a <text:s/>zero <text:s/>diagonal <text:s/>usually <text:s/>have structural ones placed symmetrically. <text:s/>For</text:p>
   <text:p text:style-name="Standard">this routine to work, the structural ones must be exactly equal <text:s/>to <text:s/>either</text:p>
   <text:p text:style-name="Standard">one or negative one. <text:s/>This routine should be used only on modified node ad-</text:p>
   <text:p text:style-name="Standard">mittance matrices and must be executed after the matrix has been built <text:s/>but</text:p>
   <text:p text:style-name="Standard">before spScale(), spNorm(), spMultiply(), spFactor(), spOrderAndFactor() or</text:p>
   <text:p text:style-name="Standard">spDeleteRowAndCol() are executed. <text:s/>It should be executed <text:s/>for <text:s/>the <text:s/>initial</text:p>
   <text:p text:style-name="Standard">factorization only.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spMNA Preorder( Matrix )</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix to be preordered.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>MODIFIED NODAL</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 37 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.24: <text:s/>spMultiply()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Multiplies Matrix by Solution on the right to find RHS. <text:s/>Assumes matrix has</text:p>
   <text:p text:style-name="Standard">not been factored. <text:s/>This routine can be <text:s/>used as a test to see if solutions</text:p>
   <text:p text:style-name="Standard">are correct.</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">void spMultiply( Matrix, RHS, Solution )</text:p>
   <text:p text:style-name="Standard">void spMultiply( Matrix, RHS, Solution, iRHS, iSolution )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>RHS <text:s/>output <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>RHS is the right hand side vector. <text:s/>This is what is being <text:s/>solved</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>for. <text:s text:c="2"/>RHS <text:s/>contains only the real portion of the right-hand side</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>if spSEPARATED COMPLEX VECTORS is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Solution <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Solution is the vector being multiplied by the matrix. <text:s text:c="2"/>Solution</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>contains <text:s text:c="3"/>only <text:s text:c="2"/>the <text:s text:c="2"/>real <text:s text:c="2"/>portion <text:s text:c="2"/>of <text:s text:c="2"/>that <text:s text:c="2"/>vector <text:s text:c="2"/>if</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>spSEPARATED COMPLEX VECTORS is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>iRHS <text:s/>output <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>iRHS is the imaginary portion of the right <text:s/>hand <text:s/>side. <text:s/>This <text:s/>is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>what is being solved for. <text:s/>It is only necessary to supply iRHS if</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>the matrix is <text:s/>complex <text:s/>and <text:s/>spSEPARATED COMPLEX VECTORS <text:s/>is <text:s/>set</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>iSolution <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>iSolution is the imaginary portion of the vector being multiplied</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>by the matrix. <text:s/>It is only necessary to supply iRHS if the matrix</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>is complex and spSEPARATED COMPLEX VECTORS is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>MULTIPLICATION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 38 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.25: <text:s/>spMultTransposed()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Multiplies transposed Matrix by Solution on the right to find RHS. <text:s/>Assumes</text:p>
   <text:p text:style-name="Standard">matrix has not been factored. <text:s/>This routine can be used as a test to see if</text:p>
   <text:p text:style-name="Standard">solutions are correct.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spMultTransposed( Matrix, RHS, Solution )</text:p>
   <text:p text:style-name="Standard">void spMultTransposed( Matrix, RHS, Solution, iRHS, iSolution )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>RHS <text:s/>output <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>RHS is the right hand side vector. <text:s/>This is what is being <text:s/>solved</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>for. <text:s text:c="2"/>RHS <text:s/>contains only the real portion of the right-hand side</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>if spSEPARATED COMPLEX VECTORS is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Solution <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Solution is the vector being multiplied by the matrix. <text:s text:c="2"/>Solution</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>contains <text:s text:c="3"/>only <text:s text:c="2"/>the <text:s text:c="2"/>real <text:s text:c="2"/>portion <text:s text:c="2"/>of <text:s text:c="2"/>that <text:s text:c="2"/>vector <text:s text:c="2"/>if</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>spSEPARATED COMPLEX VECTORS is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>iRHS <text:s/>output <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>iRHS is the imaginary portion of the right <text:s/>hand <text:s/>side. <text:s/>This <text:s/>is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>what is being solved for. <text:s/>It is only necessary to supply iRHS if</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>the matrix is <text:s/>complex <text:s/>and <text:s/>spSEPARATED COMPLEX VECTORS <text:s/>is <text:s/>set</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>iSolution <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>iSolution is the imaginary portion of the vector being multiplied</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>by the matrix. <text:s/>It is only necessary to supply iRHS if the matrix</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>is complex and spSEPARATED COMPLEX VECTORS is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>MULTIPLICATION</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>TRANSPOSE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 39 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.26: <text:s/>spNorm()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Computes and returns the L-infinity norm of <text:s/>an <text:s/>unfactored <text:s/>matrix. <text:s text:c="2"/>This</text:p>
   <text:p text:style-name="Standard">number <text:s/>is <text:s/>used <text:s/>in computing the condition number of the matrix. <text:s/>It is a</text:p>
   <text:p text:style-name="Standard">fatal error to pass this routine a factored matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spREAL spNorm( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The largest absolute row sum (the L-infinity norm) of the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>CONDITION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.27: <text:s/>spOrderAndFactor()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This routine chooses a pivot order for the matrix and factors <text:s/>it <text:s/>into <text:s/>LU</text:p>
   <text:p text:style-name="Standard">form. <text:s text:c="2"/>It handles both the initial factorization and subsequent factoriza-</text:p>
   <text:p text:style-name="Standard">tions when a reordering or threshold pivoting is desired. <text:s/>This is <text:s/>handled</text:p>
   <text:p text:style-name="Standard">in a manner that is transparent to the user.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">int spOrderAndFactor( Matrix, RHS, Threshold, AbsoluteThreshold, DiagPivot-</text:p>
   <text:p text:style-name="Standard">ing )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returned:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The error code is returned. <text:s/>Possible errors are listed below.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix to be factored.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="5"/>RHS <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Representative RHS vector that <text:s/>is <text:s/>used <text:s/>to <text:s/>determine <text:s/>pivoting</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>order <text:s/>when <text:s/>the <text:s/>right-hand side vector is sparse. <text:s/>If a term in</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>RHS is zero, it is assumed that it will usually <text:s/>be <text:s/>zero. <text:s text:c="2"/>Con-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>versely, a nonzero term in RHS indicates that the term will often</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>be nonzero. <text:s/>If RHS is a NULL pointer then <text:s/>the <text:s/>right-hand <text:s/>side</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>vector <text:s/>is assumed to be full and it is not used when determining</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>the pivoting order.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Threshold <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>This is the pivot threshold, which should <text:s/>be <text:s/>between <text:s/>zero <text:s/>and</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>one. <text:s text:c="2"/>If <text:s/>it <text:s/>is <text:s/>one <text:s/>then the pivoting method becomes complete</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 40 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="10"/>pivoting, which is very slow and tends to fill up the matrix. <text:s/>If</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>it <text:s/>is <text:s/>set close to zero the pivoting method becomes strict Mar-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>kowitz with no threshold. <text:s/>The pivot threshold is used <text:s/>to <text:s/>elim-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>inate <text:s/>pivot candidates that would cause excessive element growth</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>if they were used. <text:s/>Element <text:s/>growth <text:s/>is <text:s/>the <text:s/>cause <text:s/>of <text:s/>roundoff</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>error, <text:s/>which <text:s/>can occur even in well-conditioned matrices. <text:s/>Set-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>ting the threshold large will reduce element growth and <text:s/>roundoff</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>error, <text:s/>but <text:s/>setting it too large will cause execution time to be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>excessive and will result in a large number of fill-ins. <text:s/>If this</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>occurs, <text:s/>accuracy <text:s/>can <text:s/>actually be degraded because of the large</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>number of operations required on the <text:s/>matrix <text:s/>due <text:s/>to <text:s/>the <text:s/>large</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>number <text:s/>of fill-ins. <text:s/>A good value for diagonal pivoting seems to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>be 0.001 while a good value for complete pivoting appears <text:s/>to <text:s/>be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>0.1. <text:s text:c="2"/>The default is chosen by giving a value larger than one or</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>less than or equal to zero. <text:s/>Once the pivot threshold is set, the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>value <text:s/>becomes <text:s/>the new default for later calls to spOrderAndFac-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>tor. <text:s/>The threshold value should be increased and the matrix <text:s/>re-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>solved <text:s/>if <text:s/>growth <text:s/>is found to be excessive. <text:s/>Changing the pivot</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>threshold does not improve performance on matrices <text:s/>where <text:s/>growth</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>is <text:s/>low, as is often the case with ill-conditioned matrices. <text:s/>The</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>default value of Threshold was choosen for use with nearly diago-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>nally <text:s/>dominant <text:s/>matrices <text:s/>such as node- and modified-node admit-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>tance matrices. <text:s/>For these matrices it is <text:s/>usually <text:s/>best <text:s/>to <text:s/>use</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>diagonal pivoting. <text:s/>For matrices without a strong diagonal, it is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>usually best to use a larger threshold, such as 0.01 or 0.1.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>AbsoluteThreshold <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The absolute magnitude an element must have to be considered as a</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>pivot <text:s/>candidate, except as a last resort. <text:s/>This number should be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>set significantly smaller than the smallest diagonal element that</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>is <text:s/>is <text:s/>expected to be placed in the matrix. <text:s/>If there is no rea-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>sonable prediction for the lower bound on <text:s/>these <text:s/>elements, <text:s/>then</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>AbsoluteThreshold <text:s/>should <text:s/>be <text:s/>set to zero. <text:s/>AbsoluteThreshold is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>used to reduce the possibility of choosing as a pivot an <text:s/>element</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="10"/>that <text:s/>has suffered heavy cancellation and as a result mainly con-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>sists of roundoff error. <text:s/>Note that if AbsoluteThreshold <text:s/>is <text:s/>set</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>too <text:s/>large, <text:s/>it <text:s/>could <text:s/>drastically increase the time required to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>factor and solve the matrix. <text:s/>AbsoluteThreshold should be <text:s/>nonne-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>gative. <text:s text:c="2"/>If <text:s/>no <text:s/>element <text:s/>in <text:s/>the <text:s/>matrix is larger than Absolu-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>teThreshold, the warning spILL CONDITIONED is returned.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>DiagPivoting <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>A flag indicating that pivot selection should be confined to <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>diagonal <text:s text:c="2"/>if <text:s/>possible. <text:s text:c="2"/>If <text:s/>DiagPivoting <text:s/>is <text:s/>nonzero <text:s/>and <text:s/>if</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>DIAGONAL PIVOTING is enabled pivots will be chosen only from <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>diagonal <text:s/>unless <text:s/>there are no diagonal elements that satisfy the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>threshold criteria. <text:s/>Otherwise, the entire reduced <text:s/>submatrix <text:s/>is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>searched <text:s/>when <text:s/>looking <text:s/>for <text:s/>a <text:s/>pivot. <text:s/>The diagonal pivoting in</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Sparse is efficient and well refined, while the complete pivoting</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>is not. <text:s/>For symmetric and near symmetric matrices, it is best to</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>use diagonal pivoting because it results in the best <text:s/>performance</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>when <text:s/>reordering the matrix and when factoring the matrix without</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>ordering. <text:s/>If there is a considerable amount <text:s/>of <text:s/>nonsymmetry <text:s/>in</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>the <text:s/>matrix, <text:s/>then <text:s/>complete <text:s/>pivoting <text:s/>may <text:s/>result <text:s/>in <text:s/>a better</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 41 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="10"/>equation ordering simply because there are more pivot <text:s/>candidates</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>to <text:s/>choose <text:s/>from. <text:s/>A better ordering results in faster subsequent</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>factorizations. <text:s/>However, the <text:s/>initial <text:s/>pivot <text:s/>selection <text:s/>process</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>takes considerably longer for complete pivoting.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Possible errors:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spNO MEMORY</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spSINGULAR</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spILL CONDITIONED</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.28: <text:s/>spPartition()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This routine determines the cost to factor each row using both <text:s/>direct <text:s/>and</text:p>
   <text:p text:style-name="Standard">indirect <text:s/>addressing <text:s/>and <text:s/>decides, on a row-by-row basis, which addressing</text:p>
   <text:p text:style-name="Standard">mode is fastest. <text:s/>This information is used in spFactor() to speed the <text:s/>fac-</text:p>
   <text:p text:style-name="Standard">torization.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">When factoring a <text:s/>previously <text:s/>ordered <text:s/>matrix <text:s/>using <text:s/>spFactor(), <text:s/>fISparse</text:p>
   <text:p text:style-name="Standard">operates <text:s/>on a row-at-a-time basis. <text:s/>For speed, on each step, the row being</text:p>
   <text:p text:style-name="Standard">updated is copied into a full vector and the operations <text:s/>are <text:s/>performed <text:s/>on</text:p>
   <text:p text:style-name="Standard">that <text:s/>vector. <text:s text:c="2"/>This <text:s/>can <text:s/>be done one of two ways, either using direct ad-</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>dressing or indirect addressing. <text:s/>Direct addressing is fastest when the ma-</text:p>
   <text:p text:style-name="Standard">trix is relatively dense and indirect addressing is best when the matrix is</text:p>
   <text:p text:style-name="Standard">quite sparse. <text:s/>The user selects the type of partition used with <text:s/>Mode. <text:s text:c="2"/>If</text:p>
   <text:p text:style-name="Standard">Mode <text:s/>is <text:s/>set <text:s/>to <text:s/>spDIRECT PARTITION, <text:s/>then the all rows are placed in the</text:p>
   <text:p text:style-name="Standard">direct <text:s text:c="2"/>addressing <text:s text:c="2"/>partition. <text:s text:c="3"/>Similarly, <text:s text:c="2"/>if <text:s text:c="2"/>Mode <text:s text:c="2"/>is <text:s text:c="2"/>set <text:s text:c="3"/>to</text:p>
   <text:p text:style-name="Standard">spINDIRECT PARTITION, then the all rows are placed in the indirect address-</text:p>
   <text:p text:style-name="Standard">ing partition. <text:s/>By setting Mode to spAUTO PARTITION, the user allows Sparse</text:p>
   <text:p text:style-name="Standard">to <text:s/>select <text:s/>the <text:s/>partition for each row individually. <text:s/>spFactor() generally</text:p>
   <text:p text:style-name="Standard">runs faster if Sparse is allowed to choose its <text:s/>own <text:s/>partitioning, <text:s/>however</text:p>
   <text:p text:style-name="Standard">choosing a partition is expensive. <text:s/>The time required to choose a partition</text:p>
   <text:p text:style-name="Standard">is of the same order of the cost to factor the matrix. <text:s/>If you plan to fac-</text:p>
   <text:p text:style-name="Standard">tor <text:s/>a <text:s/>large number of matrices with the same structure, it is best to let</text:p>
   <text:p text:style-name="Standard">Sparse choose the partition. <text:s/>Otherwise, you should <text:s/>choose <text:s/>the <text:s/>partition</text:p>
   <text:p text:style-name="Standard">based <text:s/>on the predicted density of the matrix. <text:s/>By default (i.e., if spPar-</text:p>
   <text:p text:style-name="Standard">tition() is never called), Sparse chooses the partition for each row <text:s/>indi-</text:p>
   <text:p text:style-name="Standard">vidually.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spPartition( Matrix, Mode )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix to be partitioned.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Mode <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Mode must be one <text:s/>of <text:s/>three <text:s/>special <text:s/>codes: <text:s/>spDIRECT PARTITION,</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>spINDIRECT PARTITION, or spAUTO PARTITION.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 42 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.29: <text:s/>spPrint()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Formats and send the matrix to standard output. <text:s/>Some elementary statistics</text:p>
   <text:p text:style-name="Standard">are also output. <text:s/>The matrix is output in a format that is readable by peo-</text:p>
   <text:p text:style-name="Standard">ple. <text:s/>This routine should not be used on large matrices.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spPrint( Matrix, PrintReordered, Data, Header )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix to be printed.</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>PrintReordered <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Indicates whether the matrix should be printed out in its <text:s/>origi-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>nal <text:s/>form, <text:s/>as input by the user, or whether it should be printed</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>in its reordered form, as used internally by the matrix routines.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>A <text:s/>zero indicates that the matrix should be printed as inputed, a</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>one indicates that it should be printed reordered.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Data <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Boolean flag that when false <text:s/>indicates <text:s/>that <text:s/>output <text:s/>should <text:s/>be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>compressed <text:s/>such <text:s/>that only the existence of an element should be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>indicated rather than giving the actual value. <text:s/>Thus 10 times <text:s/>as</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>many elements can be printed on a row. <text:s/>A zero indicates that the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>matrix should be printed compressed. <text:s/>A one <text:s/>signifies <text:s/>that <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>matrix should be printed in all its glory.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Header <text:s/>input <text:s/>(int)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>A flag indicating that extra information should be printed, <text:s/>such</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>as row and column numbers.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>DOCUMENTATION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 43 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.30: <text:s/>spPseudoCondition()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>Computes the magnitude of the ratio of the largest to the smallest <text:s/>pivots.</text:p>
   <text:p text:style-name="Standard">This <text:s/>quantity <text:s/>is an indicator of ill-conditioning in the matrix. <text:s/>If this</text:p>
   <text:p text:style-name="Standard">ratio is large, and if the matrix is scaled such that uncertainties in <text:s/>the</text:p>
   <text:p text:style-name="Standard">right-hand <text:s/>side <text:s/>vector <text:s/>and the matrix entries are equilibrated, then the</text:p>
   <text:p text:style-name="Standard">matrix is ill-conditioned. <text:s/>However, a small ratio does not necessarily im-</text:p>
   <text:p text:style-name="Standard">ply <text:s/>that <text:s/>the <text:s/>matrix is well-conditioned. <text:s/>This routine must only be used</text:p>
   <text:p text:style-name="Standard">after a matrix has been factored by spOrderAndFactor() <text:s/>or <text:s/>spFactor() <text:s/>and</text:p>
   <text:p text:style-name="Standard">before <text:s/>it <text:s/>is cleared by spClear() or spInitialize(). <text:s/>The pseudocondition</text:p>
   <text:p text:style-name="Standard">is faster to compute than the condition number calculated by spCondition(),</text:p>
   <text:p text:style-name="Standard">but is not as informative.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spREAL <text:s/>spPseudoCondition( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The magnitude of the ratio of the largest to smallest pivot used <text:s/>dur-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>ing <text:s/>previous <text:s/>factorization. <text:s/>If the matrix was singular, zero is re-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>turned.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>PSEUDOCONDITION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 44 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.31: <text:s/>spRoundoff()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Returns a bound on the magnitude of the largest element in E = A-LU, <text:s/>where</text:p>
   <text:p text:style-name="Standard">E represents error in the matrix resulting from roundoff during the factor-</text:p>
   <text:p text:style-name="Standard">ization.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spREAL <text:s/>spRoundoff( Matrix, Rho )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Returns:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Returns a bound on the magnitude of the largest element in E = A-LU.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix. <text:s/>Matrix must be factored.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Rho <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The bound on the magnitude of the largest element in any <text:s/>of <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>reduced submatrices. <text:s/>This is the number computed by the function</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>spLargestElement() when given a factored matrix. <text:s/>If this <text:s/>number</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>is negative, the bound will be computed automatically.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>STABILITY</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 45 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.32: <text:s/>spScale()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This function scales the matrix to enhance the <text:s/>possibility <text:s/>of <text:s/>finding <text:s/>a</text:p>
   <text:p text:style-name="Standard">good <text:s/>pivoting <text:s/>order. <text:s/>Note that scaling enhances accuracy of the solution</text:p>
   <text:p text:style-name="Standard">only if it affects the pivoting order, so it only makes sense to scale <text:s/>the</text:p>
   <text:p text:style-name="Standard">matrix <text:s/>before <text:s/>spOrderAndFactor(). <text:s text:c="2"/>There are several things to take into</text:p>
   <text:p text:style-name="Standard">account when choosing the scale factors. <text:s text:c="2"/>First, <text:s/>the <text:s/>scale <text:s/>factors <text:s/>are</text:p>
   <text:p text:style-name="Standard">directly multiplied times the elements in the matrix. <text:s/>To prevent roundoff,</text:p>
   <text:p text:style-name="Standard">each scale factor should be equal to an integer power of the number base of</text:p>
   <text:p text:style-name="Standard">the machine. <text:s/>Since most machines operate in base two, scale factors should</text:p>
   <text:p text:style-name="Standard">be a power of two. <text:s/>Second, the matrix should be scaled such that <text:s/>the <text:s/>ma-</text:p>
   <text:p text:style-name="Standard">trix of element uncertainties is equilibrated. <text:s/>Third, this function multi-</text:p>
   <text:p text:style-name="Standard">plies the scale factors times the elements, so if one row tends to have un-</text:p>
   <text:p text:style-name="Standard">certainties <text:s/>1000 <text:s/>times smaller than the other rows, then its scale factor</text:p>
   <text:p text:style-name="Standard">should be 1024, not 1/1024. <text:s/>Fourth, to save time, this function <text:s/>does <text:s/>not</text:p>
   <text:p text:style-name="Standard">scale <text:s/>rows <text:s/>or columns if their scale factors are equal to one. <text:s/>Thus, the</text:p>
   <text:p text:style-name="Standard">scale factors should be normalized to the most common scale <text:s/>factor. <text:s text:c="2"/>Rows</text:p>
   <text:p text:style-name="Standard">and <text:s/>columns <text:s/>should be normalized separately. <text:s/>For example, if the size of</text:p>
   <text:p text:style-name="Standard">the matrix is 100 and 10 rows tend to have uncertainties near 1e-6 and <text:s/>the</text:p>
   <text:p text:style-name="Standard">remaining <text:s/>90 <text:s/>have uncertainties near 1e-12, then the scale factor for the</text:p>
   <text:p text:style-name="Standard">10 should be 1/1,048,576 and the scale factors for the remaining 90 <text:s/>should</text:p>
   <text:p text:style-name="Standard">be <text:s/>1. <text:s/>Fifth, <text:s/>since <text:s/>this <text:s/>routine directly operates on the matrix, it is</text:p>
   <text:p text:style-name="Standard">necessary to apply the scale factors to the RHS and Solution <text:s/>vectors. <text:s text:c="2"/>It</text:p>
   <text:p text:style-name="Standard">may be easier to simply use spOrderAndFactor() on a scaled matrix to choose</text:p>
   <text:p text:style-name="Standard">the pivoting order, and then throw away the matrix. <text:s/>Subsequent <text:s/>factoriza-</text:p>
   <text:p text:style-name="Standard">tions, <text:s/>performed <text:s/>with spFactor(), will not need to have the RHS and Solu-</text:p>
   <text:p text:style-name="Standard">tion vectors descaled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spScale( Matrix, RHS ScaleFactors, SolutionScaleFactors )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to the matrix to be scaled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>RHS ScaleFactors <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The array of RHS scale factors. <text:s/>These factors <text:s/>scale <text:s/>the <text:s/>rows.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>All scale factors are real-valued.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>SolutionScaleFactors <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The array of Solution scale factors. <text:s text:c="2"/>These <text:s/>factors <text:s/>scale <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="10"/>columns. <text:s/>All scale factors are real-valued.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>SCALING</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 46 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.33: <text:s/>spSetComplex()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The type of the matrix may then be toggled back and forth <text:s/>between <text:s/>complex</text:p>
   <text:p text:style-name="Standard">and <text:s/>real. <text:s text:c="2"/>This <text:s/>function changes the type of matrix to complex. <text:s/>For the</text:p>
   <text:p text:style-name="Standard">matrix to be set complex, the compiler option spCOMPLEX must be set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spSetComplex( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The matrix that is to be to be complex.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">4.34: <text:s/>spSetReal()</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The type of the matrix may then be toggled back and forth <text:s/>between <text:s/>complex</text:p>
   <text:p text:style-name="Standard">and <text:s/>real. <text:s text:c="2"/>This function changes the type of matrix to real. <text:s/>For the ma-</text:p>
   <text:p text:style-name="Standard">trix to be set real, the compiler option REAL must be set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spSetReal( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The matrix that is to be real.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 47 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.35: <text:s/>spSolve()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Performs the forward and backward elimination to find the unknown <text:s/>Solution</text:p>
   <text:p text:style-name="Standard">vector from RHS and the factored matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spSolve( Matrix, RHS, Solution )</text:p>
   <text:p text:style-name="Standard">void spSolve( Matrix, RHS, Solution, iRHS, iSolution )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>RHS <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>RHS is the input data array, the right-hand side vector. RHS con-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>tains <text:s/>only <text:s/>the <text:s/>real <text:s/>portion <text:s/>of the right-hand side vector if</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>spSEPARATED COMPLEX VECTORS is set true. <text:s/>RHS is undisturbed <text:s/>and</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>may be reused for other solves.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Solution <text:s/>output <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="10"/>Solution is the output data array, the unknown vector. This <text:s/>rou-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>tine <text:s/>is <text:s/>constructed <text:s/>such that RHS and Solution can be the same</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>array. <text:s/>Solution contains only the real portion <text:s/>of <text:s/>the <text:s/>unknown</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>vector if spSEPARATED COMPLEX VECTORS is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>iRHS <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>iRHS is the imaginary <text:s/>portion <text:s/>of <text:s/>the <text:s/>input <text:s/>data <text:s/>array, <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>right-hand <text:s/>side <text:s/>vector. <text:s/>This <text:s/>data <text:s/>is <text:s/>undisturbed and may be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>reused for other solves. <text:s/>This argument is unnecessary if the ma-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>trix is real or spSEPARATED COMPLEX VECTORS is set false.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>iSolution <text:s/>output <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>iSolution is the imaginary portion <text:s/>of <text:s/>the <text:s/>output <text:s/>data <text:s/>array.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>This <text:s/>routine <text:s/>is constructed such that iRHS and iSolution can be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>the same array. <text:s/>This argument is unnecessary if <text:s/>the <text:s/>matrix <text:s/>is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>real or spSEPARATED COMPLEX VECTORS is set false.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 48 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">4.36: <text:s/>spSolveTransposed()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Performs the forward and backward elimination to find the unknown <text:s/>Solution</text:p>
   <text:p text:style-name="Standard">vector <text:s/>from RHS and the transposed factored matrix. This routine is useful</text:p>
   <text:p text:style-name="Standard">when performing sensitivity analysis on a circuit using the adjoint method.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spSolveTransposed( Matrix, RHS, Solution )</text:p>
   <text:p text:style-name="Standard">void spSolveTransposed( Matrix, RHS, Solution, iRHS, iSolution )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>RHS <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>RHS is the input data array, the <text:s/>right-hand <text:s/>side <text:s/>vector. <text:s text:c="2"/>RHS</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>contains <text:s/>only <text:s/>the real portion of the right-hand side vector if</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>spSEPARATED COMPLEX VECTORS is set true. <text:s/>RHS is undisturbed <text:s/>and</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>may be reused for other solves.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Solution <text:s/>output <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Solution is the output data array, the unknown vector. This <text:s/>rou-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>tine <text:s/>is <text:s/>constructed <text:s/>such that RHS and Solution can be the same</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>array. <text:s/>Solution contains only the real portion <text:s/>of <text:s/>the <text:s/>unknown</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>vector if spSEPARATED COMPLEX VECTORS is set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>iRHS <text:s/>input <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>iRHS is the imaginary <text:s/>portion <text:s/>of <text:s/>the <text:s/>input <text:s/>data <text:s/>array, <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>right-hand <text:s/>side <text:s/>vector. <text:s/>This <text:s/>data <text:s/>is <text:s/>undisturbed and may be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>reused for other solves. <text:s/>This parameter is <text:s/>unnecessary <text:s/>if <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>matrix is real or spSEPARATED COMPLEX VECTORS is set false.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>iSolution <text:s/>output <text:s/>(spREAL[])</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>iSolution is the imaginary portion <text:s/>of <text:s/>the <text:s/>output <text:s/>data <text:s/>array.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>This <text:s/>routine <text:s/>is constructed such that iRHS and iSolution can be</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>the same array. <text:s/>This parameter is unnecessary if the <text:s/>matrix <text:s/>is</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>real or spSEPARATED COMPLEX VECTORS is set false.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>TRANSPOSE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 49 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:soft-page-break/>4.37: <text:s/>spStripFills()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spStripFills() strips all accumulated fill-ins <text:s/>from <text:s/>a <text:s/>matrix. <text:s text:c="2"/>This <text:s/>is</text:p>
   <text:p text:style-name="Standard">often <text:s/>a <text:s/>useful thing to do before reordering a matrix to help insure that</text:p>
   <text:p text:style-name="Standard">subsequent factorizations will be as efficient as possible.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spStripFills( Matrix )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Argument:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The matrix to be stripped.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Compiler options that must be set for this routine to exist:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>STRIP</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">4.38: <text:s/>spWhereSingular()</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This function returns the row <text:s/>and <text:s/>column <text:s/>number <text:s/>where <text:s/>the <text:s/>matrix <text:s/>was</text:p>
   <text:p text:style-name="Standard">detected as singular or where a zero pivot was found.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">void spWhereSingular( Matrix, Row, Col )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Matrix <text:s/>input <text:s/>(char *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Pointer to matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Row <text:s/>output <text:s/>(int *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The row number.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Row <text:s/>output <text:s/>(int *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The column number.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 50 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">5: <text:s/>MACRO FUNCTIONS</text:h>
   <text:p text:style-name="Standard">These macro functions are used to quickly enter data into the matrix <text:s/>using</text:p>
   <text:p text:style-name="Standard">pointers. <text:s text:c="2"/>These <text:s/>pointers <text:s/>are <text:s/>originally <text:s/>acquired <text:s/>by <text:s/>the <text:s/>user <text:s/>from</text:p>
   <text:p text:style-name="Standard">spGetElement(), spGetAdmittance(), spGetQuad(), and spGetOnes() during <text:s/>the</text:p>
   <text:p text:style-name="Standard">initial <text:s/>loading <text:s/>of <text:s/>the <text:s/>matrix. <text:s/>These macros work correctly even if the</text:p>
   <text:p text:style-name="Standard">elements they are to add data to are in row or column zero.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The macros reside in the file spExports.h. <text:s/>To <text:s/>use <text:s/>them, <text:s/>this <text:s/>file</text:p>
   <text:p text:style-name="Standard">must <text:s/>be <text:s/>included in the file of the calling routine and that routine must</text:p>
   <text:p text:style-name="Standard">be written in C.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">5.1: <text:s/>spADD REAL ELEMENT()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Macro function that adds a real value to an element <text:s/>in <text:s/>the <text:s/>matrix <text:s/>by <text:s/>a</text:p>
   <text:p text:style-name="Standard">pointer.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spADD REAL ELEMENT( pElement , Real )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>pElement <text:s/>input <text:s/>(spREAL *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>A pointer to the element to which Real is to be added.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Real <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The real value that is to be added to the element.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">5.2: <text:s/>spADD IMAG ELEMENT()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Macro function that adds a imaginary value to an element in the matrix by a</text:p>
   <text:p text:style-name="Standard">pointer.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spADD IMAG ELEMENT( pElement , Imag )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>pElement <text:s/>input <text:s/>(spREAL *)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>A pointer to the element to which Imag is to be added.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Imag <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The imaginary value that is to be added to the element.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 51 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">5.3: <text:s/>spADD COMPLEX ELEMENT()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Macro function that adds a complex value to an element in the matrix <text:s/>by <text:s/>a</text:p>
   <text:p text:style-name="Standard">pointer.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spADD COMPLEX ELEMENT( pElement, Real, Imag )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>pElement <text:s/>input <text:s/>(spREAL <text:s/>*)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>A pointer to the element to which Real and Imag are to be added.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Real <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The real value that is to be added to the element.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Imag <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>The imaginary value that is to be added to the element.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">5.4: <text:s/>spADD REAL QUAD()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Macro that adds a real value to the four elements <text:s/>specified <text:s/>by <text:s/>Template.</text:p>
   <text:p text:style-name="Standard">The <text:s/>value <text:s/>is <text:s/>added to the first two elements in Template, and subtracted</text:p>
   <text:p text:style-name="Standard">from the last two.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spADD REAL QUAD( Template, Real )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Template <text:s/>input <text:s/>(struct spTemplate)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Data structure containing the pointers to four matrix elements.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Real <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Real value to be added to the elements.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 52 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">5.5: <text:s/>spADD IMAG QUAD()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Macro that adds an imaginary value to the four elements specified <text:s/>by <text:s/>Tem-</text:p>
   <text:p text:style-name="Standard">plate. <text:s text:c="2"/>The value is added to the first two elements in Template, and sub-</text:p>
   <text:p text:style-name="Standard">tracted from the last two.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spADD IMAG QUAD( Template, Imag )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Template <text:s/>input <text:s/>(struct spTemplate)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Data structure containing the pointers to four matrix elements.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Imag <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Imaginary value to be added to the elements.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:soft-page-break/>5.6: <text:s/>spADD COMPLEX QUAD()</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Macro that adds a complex value to the four elements specified by Template.</text:p>
   <text:p text:style-name="Standard">The <text:s/>value <text:s/>is <text:s/>added to the first two elements in Template, and subtracted</text:p>
   <text:p text:style-name="Standard">from the last two.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spADD COMPLEX QUAD( Template, Real, Imag )</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o Arguments:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Template <text:s/>input <text:s/>(struct spTemplate)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Data structure containing the pointers to four matrix elements.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Real <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Real value to be added to the elements.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Imag <text:s/>input <text:s/>(spREAL)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Imaginary value to be added to the elements.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 53 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">6: <text:s/>CONFIGURING SPARSE</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Sparse has a extensive set of options and parameters that can <text:s/>be <text:s/>set</text:p>
   <text:p text:style-name="Standard">at <text:s/>compile <text:s/>time <text:s/>to <text:s/>alter the personality of the program. <text:s/>They also are</text:p>
   <text:p text:style-name="Standard">used to eliminate routines that are not needed so as to reduce <text:s/>the <text:s/>amount</text:p>
   <text:p text:style-name="Standard">of <text:s/>memory <text:s/>required to hold the object code. <text:s/>These options and parameters</text:p>
   <text:p text:style-name="Standard">consist of macros definitions and are contained in the file spConfig.h. <text:s/>To</text:p>
   <text:p text:style-name="Standard">configure <text:s/>Sparse, spConfig.h must be edited and then Sparse must be recom-</text:p>
   <text:p text:style-name="Standard">piled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Some terminology should be defined. <text:s/>The Markowitz row <text:s/>count <text:s/>is <text:s/>the</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>number <text:s/>of non-zero elements in a row excluding the one being considered as</text:p>
   <text:p text:style-name="Standard">pivot. <text:s/>There is one Markowitz row count <text:s/>for <text:s/>every <text:s/>row. <text:s text:c="2"/>The <text:s/>Markowitz</text:p>
   <text:p text:style-name="Standard">column <text:s/>count <text:s/>is defined similarly for columns. <text:s/>The Markowitz product for</text:p>
   <text:p text:style-name="Standard">an element is the product of its row and column counts. It is a measure <text:s/>of</text:p>
   <text:p text:style-name="Standard">how <text:s/>much <text:s/>work <text:s/>would be required on the next step of the factorization if</text:p>
   <text:p text:style-name="Standard">that element were chosen to be pivot. <text:s/>A small Markowitz product is <text:s/>desir-</text:p>
   <text:p text:style-name="Standard">able. <text:s/>For a more detailed explanation, see Kundert [kundert86].</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">6.1: <text:s/>Sparse Options</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">REAL</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that the routines are expected to <text:s/>handle <text:s/>real <text:s/>systems <text:s/>of</text:p>
   <text:p text:style-name="Standard">equations. <text:s text:c="2"/>The <text:s/>routines <text:s/>can be compiled to handle both real and complex</text:p>
   <text:p text:style-name="Standard">systems at the same time, but there is a slight speed and memory <text:s/>advantage</text:p>
   <text:p text:style-name="Standard">if the routines are complied to handle only real systems of equations.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spCOMPLEX</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that the routines will be complied to handle complex systems</text:p>
   <text:p text:style-name="Standard">of equations.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">EXPANDABLE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Setting this compiler flag true makes the matrix expandable before <text:s/>it <text:s/>has</text:p>
   <text:p text:style-name="Standard">been <text:s/>reordered. <text:s text:c="2"/>If the matrix is expandable, then if an element is added</text:p>
   <text:p text:style-name="Standard">that would be considered out of bounds in the current matrix, the <text:s/>size <text:s/>of</text:p>
   <text:p text:style-name="Standard">the matrix is increased to hold that element. <text:s/>As a result, the size of the</text:p>
   <text:p text:style-name="Standard">matrix need not be known before the matrix is built. <text:s/>The matrix can be al-</text:p>
   <text:p text:style-name="Standard">located <text:s/>with size zero and expanded. <text:s/>It is possible to expand the size of</text:p>
   <text:p text:style-name="Standard">a matrix after it is been reordered if TRANSLATE and <text:s/>EXPANDABLE <text:s/>are <text:s/>both</text:p>
   <text:p text:style-name="Standard">set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 54 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>TRANSLATE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This option allows the set of external row and column numbers <text:s/>to <text:s/>be <text:s/>non-</text:p>
   <text:p text:style-name="Standard">packed. <text:s/>In other words, the row and column numbers need not be contiguous.</text:p>
   <text:p text:style-name="Standard">The priced paid for this flexibility is that when TRANSLATE <text:s/>is <text:s/>set <text:s/>true,</text:p>
   <text:p text:style-name="Standard">the time required to initially build the matrix will be greater because the</text:p>
   <text:p text:style-name="Standard">external <text:s/>row <text:s/>and <text:s/>column <text:s/>number <text:s/>must <text:s/>be <text:s text:c="2"/>translated <text:s text:c="2"/>into <text:s text:c="2"/>internal</text:p>
   <text:p text:style-name="Standard">equivalents. <text:s text:c="2"/>This translation brings about other benefits though. <text:s/>First,</text:p>
   <text:p text:style-name="Standard">the spGetElement(), spGetAdmittance(), spGetQuad(), <text:s/>and <text:s/>spGetOnes() <text:s/>rou-</text:p>
   <text:p text:style-name="Standard">tines <text:s/>may <text:s/>be used after the matrix has been factored. <text:s/>Further, elements,</text:p>
   <text:p text:style-name="Standard">and even rows and columns, may be added to the matrix, and rows and columns</text:p>
   <text:p text:style-name="Standard">may <text:s/>be <text:s/>deleted <text:s/>from <text:s/>the matrix, after it has been reordered. <text:s/>Note that</text:p>
   <text:p text:style-name="Standard">when the set of row and column number is not a packed set, neither are <text:s/>the</text:p>
   <text:p text:style-name="Standard">RHS <text:s/>and Solution vectors. <text:s/>Thus the size of these vectors must be at least</text:p>
   <text:p text:style-name="Standard">as large as the external size, which is the value of the largest given <text:s/>row</text:p>
   <text:p text:style-name="Standard">or column numbers.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">INITIALIZE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Causes the spInitialize(), spGetInitInfo(), <text:s/>and <text:s/>spInstallInitInfo() <text:s/>rou-</text:p>
   <text:p text:style-name="Standard">tines <text:s/>to be compiled. <text:s/>These routines allow the user to store and read one</text:p>
   <text:p text:style-name="Standard">pointer in each nonzero element in the matrix. <text:s/>spInitialize() then calls a</text:p>
   <text:p text:style-name="Standard">user <text:s/>specified function for each structural nonzero in the matrix, and in-</text:p>
   <text:p text:style-name="Standard">cludes this pointer as well as the external row and column numbers as argu-</text:p>
   <text:p text:style-name="Standard">ments. <text:s text:c="2"/>This <text:s/>allows <text:s/>the <text:s/>user to write custom matrix and right-hand side</text:p>
   <text:p text:style-name="Standard">vector initialization routines.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">DIAGONAL PIVOTING</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Many matrices, and in particular node- <text:s/>and <text:s/>modified-node <text:s/>admittance <text:s/>ma-</text:p>
   <text:p text:style-name="Standard">trices, <text:s/>tend <text:s/>to <text:s/>be nearly symmetric and nearly diagonally dominant. <text:s/>For</text:p>
   <text:p text:style-name="Standard">these matrices, it is a good idea to select pivots from the diagonal. <text:s/>With</text:p>
   <text:p text:style-name="Standard">this option enabled, this is exactly what happens, though if no satisfacto-</text:p>
   <text:p text:style-name="Standard">ry pivot can be found on the diagonal, an off-diagonal pivot will be <text:s/>used.</text:p>
   <text:p text:style-name="Standard">If this option is disabled, Sparse does not preferentially search the diag-</text:p>
   <text:p text:style-name="Standard">onal. <text:s/>Because of this, Sparse has a <text:s/>wider <text:s/>variety <text:s/>of <text:s/>pivot <text:s/>candidates</text:p>
   <text:p text:style-name="Standard">available, <text:s/>and so presumably fewer fill-ins will be created. <text:s/>However, the</text:p>
   <text:p text:style-name="Standard">initial pivot selection process will take considerably longer. <text:s/>If <text:s/>working</text:p>
   <text:p text:style-name="Standard">with node admittance matrices, or other matrices with a strong diagonal, it</text:p>
   <text:p text:style-name="Standard">is probably best to use DIAGONAL PIVOTING for two reasons. <text:s/>First, accuracy</text:p>
   <text:p text:style-name="Standard">will <text:s/>be <text:s/>better because pivots will be chosen from the large diagonal ele-</text:p>
   <text:p text:style-name="Standard">ments, thus reducing the chance of growth and hence, roundoff. <text:s text:c="2"/>Second, <text:s/>a</text:p>
   <text:p text:style-name="Standard">near optimal ordering will be chosen quickly. <text:s/>If the class of matrices you</text:p>
   <text:p text:style-name="Standard">are <text:s/>working <text:s/>with <text:s/>does <text:s/>not <text:s/>have <text:s/>a <text:s/>strong <text:s text:c="2"/>diagonal, <text:s text:c="2"/>do <text:s text:c="2"/>not <text:s text:c="2"/>use</text:p>
   <text:p text:style-name="Standard">DIAGONAL PIVOTING, <text:s text:c="2"/>but <text:s text:c="2"/>consider <text:s text:c="2"/>using <text:s text:c="2"/>a <text:s text:c="2"/>larger <text:s/>threshold. <text:s text:c="2"/>When</text:p>
   <text:p text:style-name="Standard">DIAGONAL PIVOTING is turned off, the following options <text:s/>and <text:s/>constants <text:s/>are</text:p>
   <text:p text:style-name="Standard">not used: MODIFIED MARKOWITZ, MAX MARKOWITZ TIES, and TIES MULTIPLIER.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 55 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">ARRAY OFFSET</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This determines whether arrays start at an index of zero or one. <text:s/>This <text:s/>op-</text:p>
   <text:p text:style-name="Standard">tion <text:s/>is <text:s/>necessitated by the fact that standard C convention dictates that</text:p>
   <text:p text:style-name="Standard">arrays begin with an index of zero but the standard <text:s/>mathematic <text:s/>convention</text:p>
   <text:p text:style-name="Standard">states <text:s/>that <text:s/>arrays begin with an index of one. <text:s/>So if you prefer to start</text:p>
   <text:p text:style-name="Standard">your arrays with zero, or you&apos;re calling Sparse from some other programming</text:p>
   <text:p text:style-name="Standard">language, <text:s/>use <text:s/>an ARRAY OFFSET of 0. <text:s/>Otherwise, use an ARRAY OFFSET of 1.</text:p>
   <text:p text:style-name="Standard">Note that if you use an offset of one, the arrays that you pass <text:s/>to <text:s/>Sparse</text:p>
   <text:p text:style-name="Standard">must <text:s/>have an allocated length of one plus the external size of the matrix.</text:p>
   <text:p text:style-name="Standard">ARRAY OFFSET must be either 0 or 1, no other offsets are valid.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spSEPARATED COMPLEX VECTORS</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies the format for complex vectors. <text:s/>If this is set false then a</text:p>
   <text:p text:style-name="Standard">complex vector is made up of one double sized array of spREALs in which the</text:p>
   <text:p text:style-name="Standard">real and imaginary numbers are placed alternately in the array. <text:s text:c="2"/>In <text:s/>other</text:p>
   <text:p text:style-name="Standard">words, <text:s text:c="2"/>the <text:s text:c="2"/>first <text:s text:c="2"/>entry <text:s text:c="2"/>would <text:s text:c="2"/>be <text:s text:c="2"/>Complex[1].Real, <text:s text:c="2"/>then <text:s text:c="2"/>comes</text:p>
   <text:p text:style-name="Standard">Complex[1].Imag, then Complex[2].Real, etc. <text:s/>If spSEPARATED COMPLEX VECTORS</text:p>
   <text:p text:style-name="Standard">is <text:s/>set <text:s/>true, <text:s/>then <text:s/>each <text:s/>complex <text:s/>vector is represented by two arrays of</text:p>
   <text:p text:style-name="Standard">spREALs, one with the real terms, the other with the imaginary.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">MODIFIED MARKOWITZ</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that the modified Markowitz method of pivot selection is <text:s/>to</text:p>
   <text:p text:style-name="Standard">be <text:s/>used. <text:s/>The modified Markowitz method differs from standard Markowitz in</text:p>
   <text:p text:style-name="Standard">two ways. <text:s/>First, under modified Markowitz, the search for a pivot <text:s/>can <text:s/>be</text:p>
   <text:p text:style-name="Standard">terminated <text:s/>early <text:s/>if <text:s/>a adequate (in terms of sparsity) pivot candidate is</text:p>
   <text:p text:style-name="Standard">found. <text:s/>Thus, when using modified Markowitz, the initial factorization <text:s/>can</text:p>
   <text:p text:style-name="Standard">be <text:s/>faster, but at the expense of a suboptimal pivoting order that may slow</text:p>
   <text:p text:style-name="Standard">subsequent factorizations. <text:s/>The second difference is in <text:s/>the <text:s/>way <text:s/>modified</text:p>
   <text:p text:style-name="Standard">Markowitz <text:s/>breaks Markowitz ties. <text:s/>When two or more elements are pivot can-</text:p>
   <text:p text:style-name="Standard">didates and they all have the same Markowitz product, then the tie is <text:s/>bro-</text:p>
   <text:p text:style-name="Standard">ken by choosing the element that is best numerically. <text:s/>The numerically best</text:p>
   <text:p text:style-name="Standard">element is the one with the largest ratio of its magnitude to the magnitude</text:p>
   <text:p text:style-name="Standard">of <text:s/>the largest element in the same column, excluding itself. <text:s/>The modified</text:p>
   <text:p text:style-name="Standard">Markowitz method results in marginally better accuracy.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">DELETE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that the spDeleteRowAndCol() <text:s/>routine <text:s/>should <text:s/>be <text:s/>compiled.</text:p>
   <text:p text:style-name="Standard">Note that for this routine to be compiled, both DELETE and TRANSLATE should</text:p>
   <text:p text:style-name="Standard">be set true.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">STRIP</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">This specifies that the spStripFills() routine should be compiled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 56 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">MODIFIED NODAL</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that the spMNA Preorder(), the routine that preorders <text:s/>modi-</text:p>
   <text:p text:style-name="Standard">fied node admittance matrices, should be compiled. <text:s/>This routine results in</text:p>
   <text:p text:style-name="Standard">greater speed and accuracy if used with this type of matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">QUAD ELEMENT</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that the routines that allow four related elements to be en-</text:p>
   <text:p text:style-name="Standard">tered into the matrix at once should be compiled. <text:s/>The routines affected by</text:p>
   <text:p text:style-name="Standard">QUAD ELEMENT are spGetAdmittance(), spGetQuad(), and spGetOnes().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">TRANSPOSE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies <text:s/>that <text:s/>spSolveTranspose() <text:s/>and <text:s/>perhaps <text:s/>spMultTransposed(),</text:p>
   <text:p text:style-name="Standard">which operate on the matrix as if it was transposed, should be compiled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">SCALING</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that the routine that performs scaling on the matrix <text:s/>should</text:p>
   <text:p text:style-name="Standard">be <text:s/>complied. <text:s/>Scaling is not strongly supported. <text:s/>The routine to scale the</text:p>
   <text:p text:style-name="Standard">matrix is provided, but no routines are provided to scale and <text:s/>descale <text:s/>the</text:p>
   <text:p text:style-name="Standard">RHS <text:s/>and <text:s/>Solution vectors. <text:s/>It is suggested that if scaling is desired, it</text:p>
   <text:p text:style-name="Standard">only be performed when the pivot order is being chosen, which <text:s/>is <text:s/>done <text:s/>in</text:p>
   <text:p text:style-name="Standard">spOrderAndFactor(). <text:s text:c="2"/>This, <text:s/>and when the condition number of the matrix is</text:p>
   <text:p text:style-name="Standard">calculated with spCondition(), are the only times scaling <text:s/>has <text:s/>an <text:s/>effect.</text:p>
   <text:p text:style-name="Standard">The scaling may then either be removed from the solution by the user or the</text:p>
   <text:p text:style-name="Standard">scaled factored matrix may simply be thrown away.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">DOCUMENTATION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies <text:s/>that <text:s/>routines <text:s/>that <text:s/>are <text:s/>used <text:s/>to <text:s/>document <text:s/>the <text:s/>matrix,</text:p>
   <text:p text:style-name="Standard">spPrint(), <text:s/>spFileMatrix(), <text:s/>spFileVector(), <text:s/>and <text:s/>spFileStats(), should be</text:p>
   <text:p text:style-name="Standard">compiled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>DETERMINANT</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that the spDeterminant() routine should be complied.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">STABILITY</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that spLargestElement() and spRoundoff() should be compiled.</text:p>
   <text:p text:style-name="Standard">These <text:s/>routines <text:s/>are <text:s/>used to check the stability (and hence the quality of</text:p>
   <text:p text:style-name="Standard">the pivoting) of the factorization by computing a bound on the size of <text:s/>the</text:p>
   <text:p text:style-name="Standard">element <text:s/>is the matrix E = A-LU. <text:s/>If this bound is very high after applying</text:p>
   <text:p text:style-name="Standard">spOrderAndFactor(), then the pivot threshold <text:s/>should <text:s/>be <text:s/>raised. <text:s text:c="2"/>If <text:s/>the</text:p>
   <text:p text:style-name="Standard">bound <text:s/>increases <text:s/>greatly <text:s/>after <text:s/>using <text:s/>spFactor(), then the matrix should</text:p>
   <text:p text:style-name="Standard">probably be reordered.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 57 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">CONDITION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that spCondition() and spNorm(), the code <text:s/>that <text:s/>computes <text:s/>a</text:p>
   <text:p text:style-name="Standard">good estimate of the condition number of the matrix, should be compiled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">PSEUDOCONDITION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that spPseudoCondition(), the code that computes a crude and</text:p>
   <text:p text:style-name="Standard">easily <text:s/>fooled <text:s/>indicator <text:s/>of the ill-conditioning in the matrix, should be</text:p>
   <text:p text:style-name="Standard">compiled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">MULTIPLICATION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that spMultiply() and perhaps spMultTransposed(), <text:s/>the <text:s/>rou-</text:p>
   <text:p text:style-name="Standard">tines that multiply an unfactored matrix by a vector, should be compiled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">FORTRAN</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that the FORTRAN interface to Sparse1.3 should be <text:s/>compiled.</text:p>
   <text:p text:style-name="Standard">The <text:s/>ARRAY OFFSET <text:s/>option <text:s/>should <text:s/>be set to NO when interfacing to FORTRAN</text:p>
   <text:p text:style-name="Standard">programs.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">DEBUG</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This specifies that additional error checking should be compiled. <text:s/>The type</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>of <text:s/>errors <text:s/>checked <text:s/>are those that are common when the matrix routines are</text:p>
   <text:p text:style-name="Standard">first integrated into a user&apos;s program. <text:s/>Once the routines <text:s/>have <text:s/>been <text:s/>in-</text:p>
   <text:p text:style-name="Standard">tegrated <text:s/>in <text:s/>and <text:s/>are <text:s/>running smoothly, this option should be turned off.</text:p>
   <text:p text:style-name="Standard">With DEBUG enabled, Sparse is very <text:s/>defensive. <text:s text:c="2"/>If <text:s/>a <text:s/>Sparse <text:s/>routine <text:s/>is</text:p>
   <text:p text:style-name="Standard">called <text:s/>improperly, <text:s/>a message will be printed describing the file and line</text:p>
   <text:p text:style-name="Standard">number where the error was found and execution is aborted. <text:s/>One thing <text:s/>that</text:p>
   <text:p text:style-name="Standard">Sparse <text:s/>is <text:s/>particularly <text:s/>picky about is calling certain functions after an</text:p>
   <text:p text:style-name="Standard">error <text:s/>has <text:s/>occurred. <text:s text:c="2"/>If <text:s text:c="2"/>an <text:s text:c="2"/>error <text:s text:c="2"/>has <text:s text:c="2"/>occurred, <text:s text:c="2"/>do <text:s text:c="2"/>not <text:s text:c="2"/>call</text:p>
   <text:p text:style-name="Standard">spMNA Preorder(), <text:s/>spScale(), spOrderAndFactor(), spFactor(), spSolve(), or</text:p>
   <text:p text:style-name="Standard">spSolveTransposed() until the error has been cleared by spClear() or spIni-</text:p>
   <text:p text:style-name="Standard">tialize().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">6.2: <text:s/>Sparse Constants</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>These constants are used throughout the sparse matrix routines. <text:s text:c="2"/>They</text:p>
   <text:p text:style-name="Standard">should be set to suit the type of matrices being solved.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">DEFAULT THRESHOLD</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The threshold used if the user <text:s/>enters <text:s/>an <text:s/>invalid <text:s/>threshold. <text:s text:c="2"/>Also <text:s/>the</text:p>
   <text:p text:style-name="Standard">threshold <text:s/>used by spFactor() when calling spOrderAndFactor(). <text:s/>The default</text:p>
   <text:p text:style-name="Standard">threshold should not be less than or equal to zero nor larger than one.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 58 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">DIAG PIVOTING AS DEFAULT</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This indicates whether spOrderAndFactor() should use diagonal <text:s/>pivoting <text:s/>as</text:p>
   <text:p text:style-name="Standard">default. <text:s text:c="2"/>This <text:s/>issue <text:s/>only <text:s/>arises when spOrderAndFactor() is called from</text:p>
   <text:p text:style-name="Standard">spFactor().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">SPACE FOR ELEMENTS</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This number multiplied by the size of the matrix equals the number of <text:s/>ele-</text:p>
   <text:p text:style-name="Standard">ments for which memory is initially allocated in spCreate().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">SPACE FOR FILL INS</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This number multiplied by the size of the matrix equals the number of <text:s/>ele-</text:p>
   <text:p text:style-name="Standard">ments for which memory is initially allocated and specifically reserved for</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>fill-ins in spCreate().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">ELEMENTS PER ALLOCATION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The number of matrix elements requested from the <text:s/>malloc <text:s/>utility <text:s/>on <text:s/>each</text:p>
   <text:p text:style-name="Standard">call <text:s/>to <text:s/>it. <text:s text:c="2"/>Setting <text:s/>this <text:s/>value greater than one reduces the amount of</text:p>
   <text:p text:style-name="Standard">overhead spent in this system call.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">MINIMUM ALLOCATED SIZE</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The minimum allocated size of a matrix. <text:s/>Note that this does not limit <text:s/>the</text:p>
   <text:p text:style-name="Standard">minimum <text:s/>size <text:s/>of <text:s/>a <text:s/>matrix. <text:s/>This just prevents having to resize a matrix</text:p>
   <text:p text:style-name="Standard">many times if the matrix is expandable, large and <text:s/>allocated <text:s/>with <text:s/>an <text:s/>es-</text:p>
   <text:p text:style-name="Standard">timated size of zero. <text:s/>This number must not be less than one.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">EXPANSION FACTOR</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The minimum increase in the allocated size of the matrix when it is expand-</text:p>
   <text:p text:style-name="Standard">ed. <text:s/>This number must be greater than one but shouldn&apos;t be much larger than</text:p>
   <text:p text:style-name="Standard">two.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">MAX MARKOWITZ TIES</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This number is used for two slightly different things, both of which relate</text:p>
   <text:p text:style-name="Standard">to <text:s/>the search for the best pivot. <text:s/>First, it is the maximum number of ele-</text:p>
   <text:p text:style-name="Standard">ments that are Markowitz tied that will be sifted through <text:s/>when <text:s/>trying <text:s/>to</text:p>
   <text:p text:style-name="Standard">find <text:s/>the <text:s/>one <text:s/>that <text:s/>is numerically the best. <text:s/>Second, it creates an upper</text:p>
   <text:p text:style-name="Standard">bound on how large a Markowitz product can be before it eliminates the pos-</text:p>
   <text:p text:style-name="Standard">sibility <text:s/>of early termination of the pivot search. <text:s/>In other words, if the</text:p>
   <text:p text:style-name="Standard">product of the smallest Markowitz product yet found and TIES MULTIPLIER <text:s/>is</text:p>
   <text:p text:style-name="Standard">greater <text:s/>than <text:s/>MAX MARKOWITZ TIES, <text:s/>then <text:s/>no early termination takes place.</text:p>
   <text:p text:style-name="Standard">Set MAX MARKOWITZ TIES to some small value if no early termination <text:s/>of <text:s/>the</text:p>
   <text:p text:style-name="Standard">pivot <text:s/>search <text:s/>is <text:s/>desired. <text:s/>An <text:s/>array <text:s/>of <text:s/>spREALs <text:s/>is <text:s/>allocated <text:s/>of size</text:p>
   <text:p text:style-name="Standard">MAX MARKOWITZ TIES so it must be positive and shouldn&apos;t be too large.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 59 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">TIES MULTIPLIER</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Specifies the number of Markowitz ties that are allowed to occur before the</text:p>
   <text:p text:style-name="Standard">search <text:s/>for <text:s/>the <text:s/>pivot is terminated early. <text:s/>Set to some large value if no</text:p>
   <text:p text:style-name="Standard">early termination of the pivot search is desired. <text:s/>This <text:s/>number <text:s/>is <text:s/>multi-</text:p>
   <text:p text:style-name="Standard">plied <text:s/>by the Markowitz product to determine how many ties are required for</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>early termination. <text:s/>This means that more elements will be <text:s/>searched <text:s/>before</text:p>
   <text:p text:style-name="Standard">early termination if a large number of fill-ins could be created by accept-</text:p>
   <text:p text:style-name="Standard">ing what is currently considered the best choice for <text:s/>the <text:s/>pivot. <text:s text:c="2"/>Setting</text:p>
   <text:p text:style-name="Standard">this <text:s/>number <text:s/>to <text:s/>zero effectively eliminates all pivoting, which should be</text:p>
   <text:p text:style-name="Standard">avoided. <text:s/>This number must be positive.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">DEFAULT PARTITION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Which partition mode is used by spPartition() <text:s/>as <text:s/>default. <text:s text:c="2"/>Possibilities</text:p>
   <text:p text:style-name="Standard">include:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spDIRECT PARTITION <text:s/>- each row used direct addressing, best for a <text:s/>few</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>relatively dense matrices.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spINDIRECT PARTITION <text:s/>- each row used indirect addressing, best for <text:s/>a</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>few very sparse matrices.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spAUTO PARTITION <text:s/>- direct or indirect addressing is chosen on a <text:s/>row-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>by-row <text:s/>basis, carries a large overhead, but speeds up both dense</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>and sparse matrices, best if there is a large number of <text:s/>matrices</text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>that can use the same ordering.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">PRINTER WIDTH</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Gives the number of characters printable in one page width. <text:s/>Set to 80 <text:s/>for</text:p>
   <text:p text:style-name="Standard">terminals and 132 for line printers.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">6.3: <text:s/>Machine Constants</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">These numbers must be updated when the program is ported to a new machine.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">MACHINE RESOLUTION</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This is the smallest positive real double <text:s/>precision <text:s/>number <text:s/>e <text:s/>such <text:s/>that</text:p>
   <text:p text:style-name="Standard">1 + e = 1.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">LARGEST REAL</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The largest positive real number representable by a double.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">SMALLEST REAL</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The smallest positive real number representable by a double.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 60 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">LARGEST SHORT INTEGER</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The largest positive integer representable by a short.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">LARGEST LONG INTEGER</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The largest positive integer representable by a long.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 61 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">7: <text:s/>EXPORTS</text:h>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">7.1: <text:s/>Error Codes</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Errors are indicated with a integer error <text:s/>code. <text:s text:c="2"/>Macros <text:s/>definitions</text:p>
   <text:p text:style-name="Standard">for <text:s/>these <text:s/>error codes are set up and placed in the file spMatrix.h. <text:s/>They</text:p>
   <text:p text:style-name="Standard">may be imported into the users program to give readable names to the possi-</text:p>
   <text:p text:style-name="Standard">ble matrix errors. <text:s/>The possible error codes and there corresponding macros</text:p>
   <text:p text:style-name="Standard">are:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spOKAY <text:s/>- <text:s/>0</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">No error has occurred.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spSMALL PIVOT <text:s/>- <text:s/>1</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">When reordering the matrix, no element was found which satisfies the <text:s/>abso-</text:p>
   <text:p text:style-name="Standard">lute <text:s/>threshold <text:s/>criteria. <text:s/>The largest element in the matrix was chosen as</text:p>
   <text:p text:style-name="Standard">pivot. <text:s/>Nonfatal.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spZERO DIAG <text:s/>- <text:s/>2</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Fatal error. <text:s/>A zero was encountered on the diagonal of the <text:s/>matrix. <text:s text:c="2"/>This</text:p>
   <text:p text:style-name="Standard">does <text:s/>not <text:s/>necessarily <text:s/>imply that the matrix is singular. <text:s/>When this error</text:p>
   <text:p text:style-name="Standard">occurs, the <text:s/>matrix <text:s/>should <text:s/>be <text:s/>reconstructed <text:s/>and <text:s/>factored <text:s/>using <text:s/>spOr-</text:p>
   <text:p text:style-name="Standard">derAndFactor().</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spSINGULAR <text:s/>- <text:s/>3</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Fatal error. <text:s/>Matrix is singular, so no unique solution exists.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spNO MEMORY <text:s/>- <text:s/>4</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Fatal error. <text:s/>Indicates that not enough memory is available from the system</text:p>
   <text:p text:style-name="Standard">to handle the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spPANIC <text:s/>- <text:s/>5</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Fatal error indicating that the routines are being asked <text:s/>to <text:s/>do <text:s/>something</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>nonsensical <text:s/>or <text:s/>something they are not prepared for. <text:s/>This error may occur</text:p>
   <text:p text:style-name="Standard">when the matrix is specified to be real and the routines are <text:s/>not <text:s/>compiled</text:p>
   <text:p text:style-name="Standard">for <text:s/>real <text:s/>matrices, <text:s/>or when the matrix is specified to be complex and the</text:p>
   <text:p text:style-name="Standard">routines are not compiled to handle complex matrices.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spFATAL <text:s/>- <text:s/>2</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Not an error flag, but rather the dividing line between <text:s/>fatal <text:s/>errors <text:s/>and</text:p>
   <text:p text:style-name="Standard">warnings.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 62 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2">7.2: <text:s/>Data Structures</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>There is only one data structure that may need <text:s/>to <text:s/>be <text:s/>imported <text:s/>from</text:p>
   <text:p text:style-name="Standard">Sparse <text:s/>by <text:s/>the user. <text:s/>This data structure is used to hold pointers to four</text:p>
   <text:p text:style-name="Standard">related elements in matrix. <text:s/>It is used in conjunction with the routines</text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>spGetAdmittance()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>spGetOnes()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>spGetQuad()</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spGetAdmittance(), spGetOnes(), and spGetQuad() stuff the <text:s/>structure <text:s/>which</text:p>
   <text:p text:style-name="Standard">is later used by the spADD QUAD() macros. <text:s/>It is also possible for the user</text:p>
   <text:p text:style-name="Standard">to collect four pointers returned by spGetElement() and stuff them into the</text:p>
   <text:p text:style-name="Standard">template. <text:s text:c="2"/>The <text:s/>spADD QUAD() macros add a value into Element1 and Element2</text:p>
   <text:p text:style-name="Standard">and subtract the value from Element3 and Element4. <text:s/>The structure is:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">struct spTemplate</text:p>
   <text:p text:style-name="Standard">{ <text:s text:c="6"/>spREAL <text:s text:c="3"/>*Element1;</text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>spREAL <text:s text:c="3"/>*Element2;</text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>spREAL <text:s text:c="3"/>*Element3Negated;</text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>spREAL <text:s text:c="3"/>*Element4Negated;</text:p>
   <text:p text:style-name="Standard">};</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 63 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">8: <text:s/>FORTRAN COMPATIBILITY</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The Sparse1.3 package contains routines that interface <text:s/>to <text:s/>a <text:s/>calling</text:p>
   <text:p text:style-name="Standard">program <text:s/>written <text:s/>in <text:s/>FORTRAN. <text:s/>Almost every externally available Sparse1.3</text:p>
   <text:p text:style-name="Standard">routine has a counterpart defined with the same name except that <text:s/>the <text:s/>`sp&apos;</text:p>
   <text:p text:style-name="Standard">prefix is changed to `sf&apos;. <text:s/>The spADD ELEMENT() and spADD QUAD() macros are</text:p>
   <text:p text:style-name="Standard">also replaced with the sfAdd1() and sfAdd4() functions.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Any interface between two languages is going to have portibility prob-</text:p>
   <text:p text:style-name="Standard">lems, this one is no exception. <text:s/>To ease porting the FORTRAN interface file</text:p>
   <text:p text:style-name="Standard">to different operating systems, the names of the interface functions can be</text:p>
   <text:p text:style-name="Standard">easily <text:s/>redefined <text:s/>(search <text:s/>for <text:s/>`Routine <text:s/>Renaming&apos; in spFortran.c). <text:s/>When</text:p>
   <text:p text:style-name="Standard">interfacing to a FORTRAN program, the FORTRAN option should be set <text:s/>to <text:s/>YES</text:p>
   <text:p text:style-name="Standard">and <text:s/>the <text:s/>ARRAY OFFSET <text:s/>option <text:s/>should <text:s/>be set to NO (see spConfig.h). <text:s/>For</text:p>
   <text:p text:style-name="Standard">details on the return value and argument list <text:s/>of <text:s/>a <text:s/>particular <text:s/>interface</text:p>
   <text:p text:style-name="Standard">routine, see the file spFortran.c.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>A simple example of a FORTRAN program that calls Sparse follows.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 64 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Example:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>integer matrix, error, sfCreate, sfGetElement, spFactor</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>integer element(10)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>double precision rhs(4), solution(4)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c create matrix</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>matrix = sfCreate(4,0,error)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c reserve elements</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>element(1) = sfGetElement(matrix,1,1)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>element(2) = sfGetElement(matrix,1,2)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>element(3) = sfGetElement(matrix,2,1)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="11"/>element(4) = sfGetElement(matrix,2,2)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>element(5) = sfGetElement(matrix,2,3)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>element(6) = sfGetElement(matrix,3,2)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>element(7) = sfGetElement(matrix,3,3)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>element(8) = sfGetElement(matrix,3,4)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>element(9) = sfGetElement(matrix,4,3)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>element(10) = sfGetElement(matrix,4,4)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c clear matrix</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfClear(matrix)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c load matrix</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfAdd1Real(element(1), 2d0)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfAdd1Real(element(2), -1d0)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfAdd1Real(element(3), -1d0)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfAdd1Real(element(4), 3d0)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfAdd1Real(element(5), -1d0)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfAdd1Real(element(6), -1d0)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfAdd1Real(element(7), 3d0)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfAdd1Real(element(8), -1d0)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfAdd1Real(element(9), -1d0)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfAdd1Real(element(10), 3d0)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfprint(matrix, .false., .false., .true.)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>rhs(1) = 34d0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>rhs(2) = 0d0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>rhs(3) = 0d0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>rhs(4) = 0d0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c factor matrix</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>error = sfFactor(matrix)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>c solve matrix</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>call sfSolve(matrix, rhs, solution)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>write (6, 10) solution(1), solution(2), solution(3), solution(4)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>10 format (f 10.2)</text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>end</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 65 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">9: <text:s/>SPARSE TEST PROGRAM</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="5"/>The Sparse package includes a test program that is able to read matrix</text:p>
   <text:p text:style-name="Standard">equations <text:s/>from <text:s/>text <text:s/>files <text:s/>and <text:s/>print <text:s/>their <text:s/>solution along with matrix</text:p>
   <text:p text:style-name="Standard">statistics and timing information. <text:s/>The program <text:s/>can <text:s/>also <text:s/>generate <text:s/>files</text:p>
   <text:p text:style-name="Standard">containing stripped versions of the unfactored and factored matrix suitable</text:p>
   <text:p text:style-name="Standard">for plotting using standard plotting programs, such as the UNIX <text:s/>graph <text:s/>and</text:p>
   <text:p text:style-name="Standard">plot commands.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The Sparse test program is invoked using the following syntax.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sparse [options] [file1] [file2] ...</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>Options:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>-s <text:s text:c="8"/>Print solution only.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>-r x <text:s text:c="6"/>Use x as relative threshold.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>-a x <text:s text:c="6"/>Use x as absolute threshold.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>-n n <text:s text:c="6"/>Print first n terms of solution vector.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>-i n <text:s text:c="6"/>Repeat build/factor/solve n times for <text:s/>better</text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>timing results.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>-b n <text:s text:c="6"/>Use column n of <text:s/>matrix <text:s/>as <text:s/>right-hand <text:s/>side</text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>vector.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>-p <text:s text:c="8"/>Create <text:s/>plot <text:s text:c="2"/>files <text:s text:c="2"/>``filename.bef&apos;&apos; <text:s text:c="2"/>and</text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>``filename.aft&apos;&apos;.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>-c <text:s text:c="8"/>Use complete (as opposed to diagonal) <text:s/>pivot-</text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>ing.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>-x <text:s text:c="8"/>Treat real matrix as complex <text:s/>with <text:s/>imaginary</text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>part zero.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>-t <text:s text:c="8"/>Solve transposed system.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>-u <text:s text:c="8"/>Print usage message.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The presence of certain options is dependent <text:s/>on <text:s/>whether <text:s/>the <text:s/>appropriate</text:p>
   <text:p text:style-name="Standard">Sparse option has been enabled.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">If no input files are specified, sparse reads from the standard input. <text:s/>The</text:p>
   <text:p text:style-name="Standard">syntax of the input file is as follows. <text:s/>The matrix begins with one line of</text:p>
   <text:p text:style-name="Standard">arbitrary text that acts as the label, followed by a line with the <text:s/>integer</text:p>
   <text:p text:style-name="Standard">size <text:s/>of <text:s/>the <text:s/>matrix <text:s/>and <text:s/>either the real or complex keywords. <text:s/>After the</text:p>
   <text:p text:style-name="Standard">header is an <text:s/>arbitrary <text:s/>number <text:s/>of <text:s/>lines <text:s/>that <text:s/>describe <text:s/>the <text:s/>structural</text:p>
   <text:p text:style-name="Standard">nonzeros <text:s/>in <text:s/>the matrix. <text:s/>These lines have the form row column data, where</text:p>
   <text:p text:style-name="Standard">row and column are integers and data is either one <text:s/>real <text:s/>number <text:s/>for <text:s/>real</text:p>
   <text:p text:style-name="Standard">matrices <text:s/>or <text:s/>a <text:s/>real/imaginary pair of numbers for complex matrices. <text:s/>Only</text:p>
   <text:p text:style-name="Standard">one structural nonzero is described per line <text:s/>and <text:s/>the <text:s/>section <text:s/>ends <text:s/>when</text:p>
   <text:p text:style-name="Standard">either <text:s/>row <text:s/>or <text:s/>column are zero. <text:s/>Following the matrix, an optional right-</text:p>
   <text:p text:style-name="Standard">hand side vector can be described. <text:s/>The vector is <text:s/>given <text:s/>one <text:s/>element <text:s/>per</text:p>
   <text:p text:style-name="Standard">line, <text:s/>the <text:s/>number <text:s/>of element must equal the size of the matrix. <text:s/>Only one</text:p>
   <text:p text:style-name="Standard">matrix and one vector are allowed per file, and the vector, if given, <text:s/>must</text:p>
   <text:p text:style-name="Standard">follow the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 66 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Example:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>mat0 <text:s/>- <text:s/>Simple matrix.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>4 <text:s text:c="6"/>real</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>1 <text:s text:c="6"/>1 <text:s text:c="6"/>2.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>1 <text:s text:c="6"/>2 <text:s text:c="6"/>-1.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>2 <text:s text:c="6"/>1 <text:s text:c="6"/>-1.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>2 <text:s text:c="6"/>2 <text:s text:c="6"/>3.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>2 <text:s text:c="6"/>3 <text:s text:c="6"/>-1.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>3 <text:s text:c="6"/>2 <text:s text:c="6"/>-1.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>3 <text:s text:c="6"/>3 <text:s text:c="6"/>3.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>3 <text:s text:c="6"/>4 <text:s text:c="6"/>-1.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>4 <text:s text:c="6"/>3 <text:s text:c="6"/>-1.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>4 <text:s text:c="6"/>4 <text:s text:c="6"/>3.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>0 <text:s text:c="6"/>0 <text:s text:c="6"/>0.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>34.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>0.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>0.0</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>0.0</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 67 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1">10: <text:s/>SPARSE FILES</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>The following is a list of the files contained in the <text:s/>Sparse <text:s/>package</text:p>
   <text:p text:style-name="Standard">and <text:s/>a <text:s/>brief description of their contents. <text:s/>Of the files, only spConfig.h</text:p>
   <text:p text:style-name="Standard">is expected to be modified by the user and only spMatrix.h need be imported</text:p>
   <text:p text:style-name="Standard">into the program that calls Sparse.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spAlloc.c</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This file contains the routines for allocating and deallocating objects as-</text:p>
   <text:p text:style-name="Standard">sociated with the matrices, including the matrices themselves.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o User accessible functions contained in this module:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spCreate()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spDestroy()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spError()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spWhereSingular()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spGetSize()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spSetReal()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spSetComplex()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spFillinCount()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spElementCount()</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spBuild.c</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This file contains the routines for clearing and loading the matrix.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o User accessible functions contained in this module:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spClear()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spGetAdmittance()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spGetElement()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spGetInitInfo()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spGetOnes()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spGetQuad()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spInitialize()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spInstallInitInfo()</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spConfig.h</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>This file contains the options that are used to customize the package. <text:s/>For</text:p>
   <text:p text:style-name="Standard">example, <text:s/>it is possible to specify whether only real or complex systems of</text:p>
   <text:p text:style-name="Standard">equations are to be solved. <text:s/>Also included in this <text:s/>file <text:s/>are <text:s/>the <text:s/>various</text:p>
   <text:p text:style-name="Standard">constants used by the Sparse package, such as the amount of memory initial-</text:p>
   <text:p text:style-name="Standard">ly allocated for each matrix and the largest real number represented by the</text:p>
   <text:p text:style-name="Standard">machine. <text:s text:c="2"/>The user is expected to modify this file to maximize the perfor-</text:p>
   <text:p text:style-name="Standard">mance of the routines with his/her matrices.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 68 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spDefs.h</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This module contains common data structure definitions and macros <text:s/>for <text:s/>the</text:p>
   <text:p text:style-name="Standard">sparse <text:s/>matrix routines. <text:s/>These definitions are meant to remain hidden from</text:p>
   <text:p text:style-name="Standard">the program that calls the sparse matrix routines.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spDoc</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This reference manual. <text:s/>spDoc contains the manual in a form that <text:s/>is <text:s/>read-</text:p>
   <text:p text:style-name="Standard">able <text:s/>on-line <text:s/>and <text:s/>spDoc.ms contains the manual in a form that is suitable</text:p>
   <text:p text:style-name="Standard">for input into the text formatting program troff using the -ms macros.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spFactor.c</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This file contains the routines for factoring matrices into LU form.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o User accessible functions contained in this module:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spFactor()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spOrderAndFactor()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spPartition()</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 69 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spFortran.c</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This file contains the routines for <text:s/>interfacing <text:s/>Sparse1.3 <text:s/>to <text:s/>a <text:s/>program</text:p>
   <text:p text:style-name="Standard">written <text:s/>in <text:s/>FORTRAN. <text:s text:c="2"/>The <text:s/>function and argument lists of the routines in</text:p>
   <text:p text:style-name="Standard">this file are almost identical to their C equivalents except that they <text:s/>are</text:p>
   <text:p text:style-name="Standard">suitable <text:s/>for <text:s/>calling from a FORTRAN program. <text:s/>The names of these routines</text:p>
   <text:p text:style-name="Standard">use the `sf&apos; prefix to distinguish them from their C counterparts.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o User accessible functions contained in this module:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfAdd1Complex()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfAdd1Imag()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfAdd1Real()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfAdd4Complex()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfAdd4Imag()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfAdd4Real()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfClear()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfCondition()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfCreate()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfDeleteRowAndCol()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfDestroy()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfDeterminant()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfElementCount()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfError()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfFactor()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfFileMatrix()</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="5"/>sfFileStats()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfFileVector()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfFillinCount()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfGetAdmittance()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfGetElement()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfGetOnes()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfGetQuad()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfGetSize()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfLargestElement()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfMNA Preorder()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfMultTransposed()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfMultiply()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfNorm()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfOrderAndFactor()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfPartition()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfPrint()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfPseudoCondition()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfRoundoff()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfScale()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfSetComplex()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfSetReal()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfSolve()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfSolveTransposed()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfStripFills()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>sfWhereSingular()</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 70 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spMatrix.h</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This file contains definitions that are useful to the calling program. <text:s text:c="2"/>In</text:p>
   <text:p text:style-name="Standard">particular, <text:s/>this file contains error keyword definitions, some macro func-</text:p>
   <text:p text:style-name="Standard">tions that are used to quickly enter data into the matrix, <text:s/>the <text:s/>definition</text:p>
   <text:p text:style-name="Standard">of <text:s/>a <text:s/>data structure that acts as a template for entering admittances into</text:p>
   <text:p text:style-name="Standard">the matrix, and the type declarations of the various Sparse functions.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spOutput.c</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This file contains the output-to-file and output-to-screen routines for the</text:p>
   <text:p text:style-name="Standard">matrix package. <text:s/>They are capable of outputting the matrix in either a form</text:p>
   <text:p text:style-name="Standard">readable by people or a form readable by the Sparse test program.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o User accessible functions contained in this module:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spFileMatrix()</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="5"/>spFileStats()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spFileVector()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spPrint()</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spRevision</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">The history of updates for the program. <text:s/>This file also <text:s/>includes <text:s/>ordering</text:p>
   <text:p text:style-name="Standard">information for the Sparse package.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spSolve.c</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This module contains the forward and backward substitution routines.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o User accessible functions contained in this module:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spSolve()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spSolveTransposed()</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spTest.c</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This module contains a test program for the sparse matrix routines. <text:s/>It <text:s/>is</text:p>
   <text:p text:style-name="Standard">able <text:s/>to <text:s/>read <text:s/>matrices <text:s/>from <text:s/>files and solve them. <text:s/>Because of the large</text:p>
   <text:p text:style-name="Standard">number of options and capabilities built into Sparse, it is <text:s/>impossible <text:s/>to</text:p>
   <text:p text:style-name="Standard">have one test routine thoroughly exercise Sparse. <text:s/>Thus, emphasis is on ex-</text:p>
   <text:p text:style-name="Standard">ercising as many capabilities as is reasonable while also providing a <text:s/>use-</text:p>
   <text:p text:style-name="Standard">ful tool.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 71 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">spUtil.c</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This module contains various optional utility routines.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">o User accessible functions contained in this module:</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spCondition()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spDeleteRowAndCol()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spDeterminant()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spLargestElement()</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="5"/>spMNA Preorder()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spMultiply()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spMultTransposed()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spNorm()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spPseudoCondition()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spRoundoff()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spScale()</text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>spStripFills()</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Makefile</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This file is used in conjunction with the UNIX program make to compile <text:s/>the</text:p>
   <text:p text:style-name="Standard">matrix routines and their test program.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">make.com</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">This file is used to automatically compile Sparse under the <text:s/>VMS <text:s/>operating</text:p>
   <text:p text:style-name="Standard">system. <text:s/>It needs to modified slightly before being used, see the installa-</text:p>
   <text:p text:style-name="Standard">tion notes.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="27"/>- 72 -</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:h text:style-name="Heading_20_1" text:outline-level="1"><text:soft-page-break/>REFERENCES</text:h>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">[duff86] <text:s text:c="6"/>I. S. Duff, A. M. Erisman, J. K. Reid. <text:s/>Direct <text:s/>Methods <text:s/>for</text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Sparse Matrices. <text:s/>Oxford University Press, 1986.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">[golub86] <text:s text:c="5"/>G. H. Golub, C. F. V. Van Loan. <text:s/>Matrix <text:s/>Computations. <text:s text:c="2"/>The</text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Johns Hopkins University Press, 1983.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">[kundert86] <text:s text:c="3"/>Kenneth S. Kundert. <text:s/>Sparse matrix techniques. <text:s text:c="2"/>In <text:s/>Circuit</text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Analysis, <text:s/>Simulation <text:s/>and <text:s/>Design, <text:s/>Albert Ruehli (editor).</text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>North-Holland, 1986.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">[strang80] <text:s text:c="4"/>Gilbert <text:s/>Strang. <text:s text:c="2"/>Linear <text:s/>Algebra <text:s/>and <text:s/>Its <text:s text:c="2"/>Applications.</text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Academic Press, 1980.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Acknowledgements</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="5"/>We would like to acknowledge and thank the those people <text:s/>that <text:s/>contri-</text:p>
   <text:p text:style-name="Standard">buted <text:s/>ideas <text:s/>that <text:s/>were <text:s/>incorporated <text:s/>into <text:s/>Sparse. <text:s/>In particular, Jacob</text:p>
   <text:p text:style-name="Standard">White, Kartikeya Mayaram, Don Webber, Tom Quarles, Howard Ko and <text:s/>Beresford</text:p>
   <text:p text:style-name="Standard">Parlett.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="23"/>June 23, 1988</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
  </office:text>
 </office:body>
</office:document>